<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江南品味|记录编程道路上的点点滴滴!!!</title>
  <subtitle>记录编程道路上的点点滴滴!!!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jiangnan.pw/"/>
  <updated>2017-03-24T03:30:55.933Z</updated>
  <id>http://blog.jiangnan.pw/</id>
  
  <author>
    <name>江南品味</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac OSX开发环境搭建手记</title>
    <link href="http://blog.jiangnan.pw/cj0n616hz001gbk7kw1k7d6he/"/>
    <id>http://blog.jiangnan.pw/cj0n616hz001gbk7kw1k7d6he/</id>
    <published>2017-03-23T04:47:40.000Z</published>
    <updated>2017-03-24T03:30:55.933Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<h2 id="Brew"><a href="#Brew" class="headerlink" title="Brew"></a>Brew</h2><blockquote>
<p>Brew 是 Mac 下面的包管理工具，通过 Github 托管适合 Mac 的编译配置以及 Patch，可以方便的安装开发工具。 Mac 自带ruby 所以安装起来很方便，同时它也会自动把git也给你装上。官方网站： <a href="http://brew.sh" target="_blank" rel="external">http://brew.sh</a> 。</p>
<p>安装完成之后，建议执行一下自检，brew doctor如果看到Your system is ready to brew. 那么你的brew已经可以开始使用了。</p>
</blockquote>
<h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&quot;</div></pre></td></tr></table></figure>
<h3 id="自检："><a href="#自检：" class="headerlink" title="自检："></a>自检：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew doctor</div></pre></td></tr></table></figure>
<h3 id="常用命令：（所有软件以php7-1为例子）"><a href="#常用命令：（所有软件以php7-1为例子）" class="headerlink" title="常用命令：（所有软件以php7.1为例子）"></a>常用命令：（所有软件以php7.1为例子）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">brew update                        #更新brew可安装包，建议每次执行一下</div><div class="line">brew search php71                  #搜索php7.1</div><div class="line">brew tap josegonzalez/php          #安装扩展&lt;gihhub_user/repo&gt;   </div><div class="line">brew tap                           #查看安装的扩展列表</div><div class="line">brew install php71                 #安装php7.1</div><div class="line">brew remove  php71                 #卸载php7.1</div><div class="line">brew upgrade php71                 #升级php7.1</div><div class="line">brew options php71                 #查看php7.1安装选项</div><div class="line">brew info    php71                 #查看php7.1相关信息</div><div class="line">brew home    php71                 #访问php7.1官方网站</div><div class="line">brew services list                 #查看系统通过 brew 安装的服务</div><div class="line">brew services cleanup              #清除已卸载无用的启动配置文件</div><div class="line">brew services restart php71        #重启php-fp</div></pre></td></tr></table></figure>
<p>注意：brew services 相关命令最好别经常用了，提示会被移除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  ~  brew services restart php71</div><div class="line">Warning: brew services is unsupported and will be removed soon.</div><div class="line">You should use launchctl instead.</div><div class="line">Please feel free volunteer to support it in a tap.</div><div class="line"></div><div class="line">Stopping `php71`... (might take a while)</div><div class="line">==&gt; Successfully stopped `php71` (label: homebrew.mxcl.php71)</div><div class="line">==&gt; Successfully started `php71` (label: homebrew.mxcl.php71)</div></pre></td></tr></table></figure>
<h2 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh My Zsh"></a>Oh My Zsh</h2><blockquote>
<p>ohmyzsh &amp; iTerm2两个神器，在Mac os x下是一定要装的. 两组配合起来使用，加上插件。简直是神一样的存在。 秒杀梅西，内马尔啊：） Oh 猛戳到官网</p>
</blockquote>
<h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L http://install.ohmyz.sh | sh</div></pre></td></tr></table></figure>
<h2 id="安装终端的命令自动提示"><a href="#安装终端的命令自动提示" class="headerlink" title="安装终端的命令自动提示"></a>安装终端的命令自动提示</h2><p>在终端下操作会经常需要输入一些常用的命令，要不出错的输入这些命令也不是件容易的事，zsh还有一个很好用的补全命令的插件zsh-autosuggestions, 我们通过下面命令安装下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install zsh-autosuggestions</div></pre></td></tr></table></figure>
<p>我记得以前只要这么安装完就可以的，但是这次我安装完还是没有出现自动提示，不去想这个原因了，我们自己设置下就行了，先找到zsh-autosuggestions.zsh文件的安装路径，在/usr/local/Cellar/zsh-autosuggestions/0.3.3/share/zsh-autosuggestions里面（这里就是前面我为什么要大家看brew的安装提示了，我们知道brew将程序安装在什么文件夹，那就很容易的找到我们要的文件）,我们把zsh-autosuggestions.zsh放入~/.zshrc文件中，就是加入下面这句话:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /usr/local/Cellar/zsh-autosuggestions/0.3.3/share/zsh-autosuggestions/zsh-autosuggestions.zsh</div></pre></td></tr></table></figure>
<p>好了，然后你可以执行source ~/.zshrc或者重新打开终端，看下效果：</p>
<p><img src="https://lh3.googleusercontent.com/-kmKtrstTeOI/WNSJJjAa2BI/AAAAAAAAB3E/1fbBeha76NM/s0/2017-03-24_11-49-10.png" alt="自动提示"></p>
<p>如上图，我输入一个b就会自动提示我之前输入过的命令，然后按一下右方向键就能自动补全了。</p>
<h3 id="设置默认shell"><a href="#设置默认shell" class="headerlink" title="设置默认shell"></a>设置默认shell</h3><blockquote>
<p>查看系统支持的shell列表，Mac 10.9.4 自带了 zsh 5.0.2，Linux上得安装。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cat /etc/shells</div><div class="line"># List of acceptable shells for chpass(1).</div><div class="line"># Ftpd will not allow users to connect who are not using</div><div class="line"># one of these shells.</div><div class="line"></div><div class="line">/bin/bash</div><div class="line">/bin/csh</div><div class="line">/bin/ksh</div><div class="line">/bin/sh</div><div class="line">/bin/tcsh</div><div class="line">/bin/zsh</div><div class="line">zsh --version</div><div class="line">zsh 5.0.2 (x86_64-apple-darwin13.0)</div><div class="line">chsh -s /bin/zsh</div></pre></td></tr></table></figure>
<blockquote>
<p>虽然Mac自带了zsh，如果你想要最新版的zsh，那么你用 brew install zsh安装一个最新的吧。/usr/local/bin/zsh –version zsh 5.0.5 (x86_64-apple-darwin13.3.0) 区别也不会很大， 默认的版本已经很新了。</p>
</blockquote>
<h1 id="MySQL-PHP-Nginx"><a href="#MySQL-PHP-Nginx" class="headerlink" title="MySQL PHP Nginx"></a>MySQL PHP Nginx</h1><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mysql</div></pre></td></tr></table></figure>
<p>MySQL开机启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</div></pre></td></tr></table></figure>
<p>安装完成之后开启MySQL安全机制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/opt/mysql/bin/mysql_secure_installation</div></pre></td></tr></table></figure>
<p>根据终端提示，输入root密码，然后依次确认一些安全选项。具体信息可以参考<a href="http://blog.frd.mn/install-nginx-php-fpm-mysql-and-phpmyadmin-on-os-x-mavericks-using-homebrew/" target="_blank" rel="external">外国友人的这篇文章</a></p>
<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><p>添加brew的PHP扩展库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew tap homebrew/dupes</div><div class="line">brew tap josegonzalez/homebrew-php</div></pre></td></tr></table></figure>
<p>可以使用<code>brew options php71</code>命令来查看安装php7.1的选项，这里我用下面的选项安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install php70 --with-debug --with-gmp --with-homebrew-curl --with-homebrew-libressl --with-homebrew-libxml2 --with-homebrew-libxslt --with-imap --with-libmysql</div></pre></td></tr></table></figure>
<blockquote>
<p>PHP编译过程中如果遇到<code>configure: error: Cannot find OpenSSL&#39;s &lt;evp.h&gt;</code>错误，执行<code>xcode-select --install</code>重新安装一下<strong>Xcode Command Line Tools</strong> 在<a href="https://github.com/Homebrew/homebrew-php/issues/1181" target="_blank" rel="external">GitHub HomeBrew</a>上有关于这个讨论:<br><em>For future reference of anybody looking for Command Line Tools with Xcode 5, open up a Terminal window and type xcode-select –install. A window will appear informing you command line tools are required. Click Install and you should be good to go</em></p>
<p>我安装的时候还遇到了一个奇怪的问题，提示fatal error: ‘my_global.h’ file not found #include <my_global.h> 就是提示各种<code>.h</code>的文件不存在。各种google以后发现了一个论坛的资料给了我一些启发，<a href="https://www.blitzbasic.com/Community/posts.php?topic=102579" target="_blank" rel="external">搓这里</a></my_global.h></p>
</blockquote>
<p>里面提到了一下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/mysql/include</div></pre></td></tr></table></figure></p>
<p>待续……TODO</p>
<p>等待PHP编译完成，开始安装PHP常用扩展，扩展安装过程中brew会自动安装依赖包，例如<code>php71-pdo-pgsql</code> 会自动装上<code>postgresql</code>,这里我安装以下PHP扩展：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">brew install php71-apcu\</div><div class="line"> php71-gearman\</div><div class="line"> php71-geoip\</div><div class="line"> php71-gmagick\</div><div class="line"> php71-imagick\</div><div class="line"> php71-intl\</div><div class="line"> php71-mcrypt\</div><div class="line"> php71-memcache\</div><div class="line"> php71-memcached\</div><div class="line"> php71-mongo\</div><div class="line"> php71-opcache\</div><div class="line"> php71-pdo-pgsql\</div><div class="line"> php71-phalcon\</div><div class="line"> php71-redis\</div><div class="line"> php71-sphinx\</div><div class="line"> php71-swoole\</div><div class="line"> php71-uuid\</div><div class="line"> php71-xdebug;</div></pre></td></tr></table></figure>
<blockquote>
<p>扩展里面提一下<a href="http://phalconphp.com/" target="_blank" rel="external">php71-phalcon</a> 和 <a href="http://www.swoole.com/" target="_blank" rel="external">php71-swoole</a>. 一个是C语言写的PHP框架，安装来个人摸索熟悉一下，还没有真正的使用过，大致看了一下文档，感觉非常吊炸天。目前公司的项目是基于Yii2的，也看看这个框架。 另外一个<a href="http://www.swoole.com/" target="_blank" rel="external">swoole是国产的PHP高性能网络通信框架</a>，貌似不错，可能在项目中会考虑用到它。</p>
</blockquote>
<p>由于Mac自带了php和php-fpm，因此需要添加系统环境变量PATH来替代自带PHP版本,我们用的是zsh,所以放进.zshrc中,如果你用的shell是bash,那么可以把下面的信息写入到~/.bash_profile文件中，如果这个文件没有，你自己建一个就行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">echo &apos;export PATH=&quot;$(brew --prefix php70)/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc  #for php</div><div class="line">echo &apos;export PATH=&quot;$(brew --prefix php70)/sbin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc  #for php-fpm</div><div class="line">echo &apos;export PATH=&quot;/usr/local/bin:/usr/local/sbib:$PATH&quot;&apos; &gt;&gt; ~/.zshrc #for other brew install soft</div><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">echo &apos;export PATH=&quot;$(brew --prefix php71)/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile  #for php</div><div class="line">echo &apos;export PATH=&quot;$(brew --prefix php71)/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile  #for php-fpm</div><div class="line">echo &apos;export PATH=&quot;/usr/local/bin:/usr/local/sbib:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile #for other brew install soft</div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>测试一下效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#brew安装的php 他在/usr/local/opt/php71/bin/php</div><div class="line">php -v    </div><div class="line">PHP 7.1.3 (cli) (built: Jul 16 2014 15:43:06) (DEBUG)</div><div class="line">Copyright (c) 1997-2014 The PHP Group</div><div class="line">Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies</div><div class="line">    with Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies</div><div class="line">    with Xdebug v2.2.5, Copyright (c) 2002-2014, by Derick Rethans </div><div class="line"></div><div class="line">#Mac自带的PHP</div><div class="line">/usr/bin/php -v   </div><div class="line">PHP 5.4.24 (cli) (built: Jan 19 2014 21:32:15) </div><div class="line">Copyright (c) 1997-2013 The PHP Group</div><div class="line">Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies</div><div class="line"></div><div class="line">#brew安装的php-fpm 他在/usr/local/opt/php71/sbin/php-fpm</div><div class="line">php-fpm -v</div><div class="line">PHP 7.1.3 (fpm-fcgi) (built: Jul 16 2014 15:43:12) (DEBUG)</div><div class="line">Copyright (c) 1997-2014 The PHP Group</div><div class="line">Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies</div><div class="line">    with Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies</div><div class="line">    with Xdebug v2.2.5, Copyright (c) 2002-2014, by Derick Rethans</div><div class="line"></div><div class="line">#Mac自带的php-fpm</div><div class="line">/usr/sbin/php-fpm -v</div><div class="line">PHP 5.4.24 (fpm-fcgi) (built: Jan 19 2014 21:32:57)</div><div class="line">Copyright (c) 1997-2013 The PHP Group</div><div class="line">Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies</div></pre></td></tr></table></figure>
<p>修改php-fpm配置文件，<code>vim /usr/local/etc/php/7.1/php-fpm.conf</code>，找到pid相关大概在25行，去掉注释 <code>pid = run/php-fpm.pid</code>, 那么php-fpm的pid文件就会自动产生在<code>/usr/local/var/run/php-fpm.pid</code>，下面要安装的Nginx pid文件也放在这里。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#测试php-fpm配置</div><div class="line">php-fpm -t</div><div class="line">php-fpm -c /usr/local/etc/php/7.1.3/php.ini -y /usr/local/etc/php/7.1.3/php-fpm.conf -t</div><div class="line"></div><div class="line">#启动php-fpm</div><div class="line">php-fpm -D</div><div class="line">php-fpm -c /usr/local/etc/php/7.1.3/php.ini -y /usr/local/etc/php/7.1.3/php-fpm.conf -D</div><div class="line"></div><div class="line">#关闭php-fpm</div><div class="line">kill -INT `cat /usr/local/var/run/php-fpm.pid`</div><div class="line"></div><div class="line">#重启php-fpm</div><div class="line">kill -USR2 `cat /usr/local/var/run/php-fpm.pid`</div><div class="line"></div><div class="line">#也可以用上文提到的brew命令来重启php-fpm，不过他官方不推荐用这个命令了</div><div class="line">brew services restart php71</div><div class="line"></div><div class="line">#还可以用这个命令来启动php-fpm</div><div class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plist</div></pre></td></tr></table></figure>
<p>启动php-fpm之后，确保它正常运行监听9000端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lsof -Pni4 | grep LISTEN | grep php</div><div class="line">php-fpm   30907 calvin    9u  IPv4 0xf11f9e8e8033a2a7      0t0  TCP 127.0.0.1:9000 (LISTEN)</div><div class="line">php-fpm   30917 calvin    0u  IPv4 0xf11f9e8e8033a2a7      0t0  TCP 127.0.0.1:9000 (LISTEN)</div><div class="line">php-fpm   30918 calvin    0u  IPv4 0xf11f9e8e8033a2a7      0t0  TCP 127.0.0.1:9000 (LISTEN)</div><div class="line">php-fpm   30919 calvin    0u  IPv4 0xf11f9e8e8033a2a7      0t0  TCP 127.0.0.1:9000 (LISTEN)</div><div class="line">#正常情况，会看到上面这些进程</div></pre></td></tr></table></figure>
<p>PHP-FPM开机启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/php71/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.php71.plist</div></pre></td></tr></table></figure>
<p>补充</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">php-fpm的一些管理:</div><div class="line"></div><div class="line">#测试php-fpm配置</div><div class="line">php-fpm -t</div><div class="line"></div><div class="line">#启动php-fpm</div><div class="line">php-fpm -D</div><div class="line"></div><div class="line">#关闭php-fpm</div><div class="line">kill -INT `cat /usr/local/var/run/php-fpm.pid`</div><div class="line"></div><div class="line">#重启php-fpm</div><div class="line">kill -USR2 `cat /usr/local/var/run/php-fpm.pid`</div><div class="line"></div><div class="line">#也可以用上文提到的brew命令来管理php-fpm</div><div class="line">brew services start|stop|restart php70</div><div class="line"></div><div class="line">#还可以用这个命令来管理php-fpm</div><div class="line">php70-fpm start|stop|restart</div></pre></td></tr></table></figure>
<p>以上安装出现的问题记录：</p>
<ol>
<li>使用Curl出现的502错误#</li>
</ol>
<p>做有赞接口的时候发现出现了502错误，用下面的测试代码也可以测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$curl = curl_init(); </div><div class="line">     // 抓取支付宝首页测试 </div><div class="line">     curl_setopt($curl, CURLOPT_URL, &apos;https://www.alipay.com&apos;); </div><div class="line">     // 设置header </div><div class="line">     curl_setopt($curl, CURLOPT_HEADER, 1); </div><div class="line">     // 设置cURL 参数，要求结果保存到字符串中还是输出到屏幕上 </div><div class="line">     curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); </div><div class="line">     // 运行cURL，请求网页数据 </div><div class="line">     $data = curl_exec($curl); </div><div class="line">     // 关闭cURL请求 </div><div class="line">     curl_close($curl); </div><div class="line">     // 打印出抓取的测试数据 </div><div class="line">     var_dump($data);</div></pre></td></tr></table></figure></p>
<p>产生问题的原因：brew安装curl时默认没有带上–with-openssl<br>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 先删除curl</div><div class="line">brew uninstall curl</div><div class="line"></div><div class="line"># 重新安装curl,带上--with-openssl</div><div class="line">brew install curl --with-openssl</div><div class="line"></div><div class="line"># 或者使用brew reinstall</div><div class="line">brew reinstall curl --with-openssl</div></pre></td></tr></table></figure>
<p>然后重启下php-fpm</p>
<p><strong>安装php composer</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install composer</div><div class="line">#检查一下情况</div><div class="line">composer --version</div><div class="line">Composer version 1.0.0-alpha8 2014-01-06 18:39:59</div></pre></td></tr></table></figure>
<blockquote>
<p>redis memcached这些软件brew 已经自动依赖安装上，如果想开机自动启动，或者查看使用说明 <code>brew info redis</code>即可。另外，composer的中文文档：<a href="http://composer.golaravel.com/" target="_blank" rel="external">猛戳这里</a></p>
</blockquote>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>首先查看一下可选的编译参数</p>
<p>brew options nginx<br>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">--with-debug</div><div class="line">        Compile with support for debug log</div><div class="line">--with-gunzip</div><div class="line">        Compile with support for gunzip module</div><div class="line">--with-passenger</div><div class="line">        Compile with support for Phusion Passenger module</div><div class="line">--with-spdy</div><div class="line">        Compile with support for SPDY module</div><div class="line">--with-webdav</div><div class="line">        Compile with support for WebDAV module</div><div class="line">--devel</div><div class="line">        install development version 1.7.7</div><div class="line">--HEAD</div><div class="line">        install HEAD version</div></pre></td></tr></table></figure>
<p>可以看到可选的编译参数里没有 GeoIP 模块，那么如果还想用 Homebrew 来安装 nginx，就只有自己修改默认的 Formula 来添加参数，或者使用其他人修改好后共享的 Formula 了。</p>
<p>考虑到之后可能还会用到其他模块，我就没有自己创建 Formula，而是找到了 homebrew/nginx 这个 tap。</p>
<p>首先给 Homebrew 添加这个 tap：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew tap homebrew/nginx</div></pre></td></tr></table></figure>
<p>再查看一下可选参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew options nginx-full</div></pre></td></tr></table></figure>
<p>可以在结果中看到有 WebDav 模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--with-dav-ext-module</div><div class="line">	Build with HTTP WebDav Extended support</div></pre></td></tr></table></figure>
<p>这样就可以安装有 WebDav 模块的 nginx 了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx-full --with-webdav --with-dav-ext-module</div></pre></td></tr></table></figure>
<p>不只是 WebDav 模块，其他可选模块也可以用同样方法添加.</p>
<p>nginx启动关闭命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#测试配置是否有语法错误</div><div class="line">nginx -t</div></pre></td></tr></table></figure></p>
<p>#打开 nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure></p>
<p>#重新加载配置|重启|停止|退出 nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload|reopen|stop|quit</div></pre></td></tr></table></figure></p>
<p>#也可以使用Mac的launchctl来启动|停止<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div><div class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div></pre></td></tr></table></figure></p>
<p>Nginx开机启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/nginx-full/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx-full.plist</div></pre></td></tr></table></figure>
<p>Nginx监听80端口需要root权限执行，因此：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chown root:wheel /usr/local/opt/nginx-full/bin/nginx</div><div class="line">sudo chmod u+s /usr/local/opt/nginx-full/bin/nginx</div></pre></td></tr></table></figure>
<p>配置nginx.conf<br>创建需要用到的目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/var/log/nginx</div><div class="line">mkdir -p /usr/local/etc/nginx/sites-available</div><div class="line">mkdir -p /usr/local/etc/nginx/sites-enabled</div><div class="line">mkdir -p /usr/local/etc/nginx/conf.d</div><div class="line">mkdir -p /usr/local/etc/nginx/ssl</div></pre></td></tr></table></figure></p>
<p>vim /usr/local/etc/nginx/nginx.conf 输入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">error_log   /usr/local/var/log/nginx/error.log debug;</div><div class="line"></div><div class="line"></div><div class="line">pid        /usr/local/var/run/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  256;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /usr/local/var/log/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    keepalive_timeout  65;</div><div class="line">    port_in_redirect off;</div><div class="line"></div><div class="line">    include /usr/local/etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置nginx php-fpm配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vim /usr/local/etc/nginx/conf.d/php-fpm</div><div class="line">#proxy the php scripts to php-fpm</div><div class="line">location ~ \.php$ &#123;</div><div class="line">    try_files                   $uri = 404;</div><div class="line">    fastcgi_pass                127.0.0.1:9000;</div><div class="line">    fastcgi_index               index.php;</div><div class="line">    fastcgi_intercept_errors    on;</div><div class="line">    include /usr/local/etc/nginx/fastcgi.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建默认虚拟主机default<br>vim /usr/local/etc/nginx/sites-available/default输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  localhost;</div><div class="line">    root         /var/www/;</div><div class="line"></div><div class="line">    access_log  /usr/local/var/logs/nginx/default.access.log  main;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        index  index.html index.htm index.php;</div><div class="line">        autoindex   on;</div><div class="line">        include     /usr/local/etc/nginx/conf.d/php-fpm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /info &#123;</div><div class="line">        allow   127.0.0.1;</div><div class="line">        deny    all;</div><div class="line">        rewrite (.*) /.info.php;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page  404     /404.html;</div><div class="line">    error_page  403     /403.html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建ssl默认虚拟主机default-ssl<br>vim /usr/local/etc/nginx/sites-available/default-ssl输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       443;</div><div class="line">    server_name  localhost;</div><div class="line">    root       /var/www/;</div><div class="line"></div><div class="line">    access_log  /usr/local/var/logs/nginx/default-ssl.access.log  main;</div><div class="line"></div><div class="line">    ssl                  on;</div><div class="line">    ssl_certificate      ssl/localhost.crt;</div><div class="line">    ssl_certificate_key  ssl/localhost.key;</div><div class="line"></div><div class="line">    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    ssl_protocols  SSLv2 SSLv3 TLSv1;</div><div class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    ssl_prefer_server_ciphers   on;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        include   /usr/local/etc/nginx/conf.d/php-fpm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /info &#123;</div><div class="line">        allow   127.0.0.1;</div><div class="line">        deny    all;</div><div class="line">        rewrite (.*) /.info.php;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page  404     /404.html;</div><div class="line">    error_page  403     /403.html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建phpmyadmin虚拟主机</p>
<p>vim /usr/local/etc/nginx/sites-available/phpmyadmin #输入以下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       306;</div><div class="line">    server_name  localhost;</div><div class="line">    root    /usr/local/share/phpmyadmin;</div><div class="line"></div><div class="line">    error_log   /usr/local/var/logs/nginx/phpmyadmin.error.log;</div><div class="line">    access_log  /usr/local/var/logs/nginx/phpmyadmin.access.log main;</div><div class="line"></div><div class="line">    ssl                  on;</div><div class="line">    ssl_certificate      ssl/phpmyadmin.crt;</div><div class="line">    ssl_certificate_key  ssl/phpmyadmin.key;</div><div class="line"></div><div class="line">    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    ssl_protocols  SSLv2 SSLv3 TLSv1;</div><div class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    ssl_prefer_server_ciphers   on;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        index  index.html index.htm index.php;</div><div class="line">        include   /usr/local/etc/nginx/conf.d/php-fpm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置SSL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/etc/nginx/ssl</div><div class="line">openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj &quot;/C=US/ST=State/L=Town/O=Office/CN=localhost&quot; -keyout /usr/local/etc/nginx/ssl/localhost.key -out /usr/local/etc/nginx/ssl/localhost.crt</div><div class="line">openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj &quot;/C=US/ST=State/L=Town/O=Office/CN=phpmyadmin&quot; -keyout /usr/local/etc/nginx/ssl/phpmyadmin.key -out /usr/local/etc/nginx/ssl/phpmyadmin.crt</div></pre></td></tr></table></figure>
<p>创建虚拟主机软连接，开启虚拟主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/etc/nginx/sites-available/default /usr/local/etc/nginx/sites-enabled/default</div><div class="line">ln -sfv /usr/local/etc/nginx/sites-available/default-ssl /usr/local/etc/nginx/sites-enabled/default-ssl</div><div class="line">ln -sfv /usr/local/etc/nginx/sites-available/phpmyadmin /usr/local/etc/nginx/sites-enabled/phpmyadmin</div></pre></td></tr></table></figure>
<p>启动|停止Nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div><div class="line">launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div></pre></td></tr></table></figure>
<p>设置快捷服务控制命令<br>为了后面管理方便，将命令 alias 下，vim ~/.zsh_aliases 输入一下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">alias nginx.start=&apos;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist&apos;</div><div class="line">alias nginx.stop=&apos;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist&apos;</div><div class="line">alias nginx.restart=&apos;nginx.stop &amp;&amp; nginx.start&apos;</div><div class="line">alias php-fpm.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php55.plist&quot;</div><div class="line">alias php-fpm.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php55.plist&quot;</div><div class="line">alias php-fpm.restart=&apos;php-fpm.stop &amp;&amp; php-fpm.start&apos;</div><div class="line">alias mysql.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</div><div class="line">alias mysql.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</div><div class="line">alias mysql.restart=&apos;mysql.stop &amp;&amp; mysql.start&apos;</div><div class="line">alias redis.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist&quot;</div><div class="line">alias redis.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.redis.plist&quot;</div><div class="line">alias redis.restart=&apos;redis.stop &amp;&amp; redis.start&apos;</div><div class="line">alias memcached.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist&quot;</div><div class="line">alias memcached.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist&quot;</div><div class="line">alias memcached.restart=&apos;memcached.stop &amp;&amp; memcached.start&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#让快捷命令生效</div><div class="line">echo &quot;[[ -f ~/.zsh_aliases ]] &amp;&amp; . ~/.zsh_aliases&quot; &gt;&gt; ~/.zshrc     </div><div class="line">source ~/.zshrc</div><div class="line">#创建站点目录到主目录，方便快捷访问</div><div class="line">ln -sfv /var/www ~/htdocs</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;h2 id=&quot;Brew&quot;&gt;&lt;a href=&quot;#Brew&quot; class=&quot;headerlink&quot; title=&quot;Brew&quot;&gt;&lt;/a&gt;Brew&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Brew 是 Mac 下面的包管理工具，通过 Github 托管适合
    
    </summary>
    
      <category term="苹果相关" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/Mac%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="nginx" scheme="http://blog.jiangnan.pw/tags/nginx/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
      <category term="php" scheme="http://blog.jiangnan.pw/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Why is @font-face throwing a 404 error on woff files?</title>
    <link href="http://blog.jiangnan.pw/cj0n616hg0019bk7kodtmc1iq/"/>
    <id>http://blog.jiangnan.pw/cj0n616hg0019bk7kodtmc1iq/</id>
    <published>2017-02-26T05:54:08.000Z</published>
    <updated>2017-02-26T06:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<p>I also came across the same issue. I think doing this configuration from the server level would be better since it applies for all the websites.</p>
<ol>
<li>Go to IIS root node and double-click the <code>MIME Types</code> configuration option</li>
<li>Click “Add” link in the Actions panel on the top right.</li>
<li>This will bring up a dialog. Add .woff file extension and specify <code>application/x-font-wof</code> as the corresponding MIME type.</li>
</ol>
<p>Add MIME Type for <code>.woff</code> file name extension</p>
<p><img src="https://lh3.googleusercontent.com/-BwnUFnLQpJA/WLJuyRrq9xI/AAAAAAAABtQ/5egeZtwfb5w/s0/2017-02-26_14-59-36.png" alt=""><br><img src="https://lh3.googleusercontent.com/-S3VlMYYqh2g/WLJu8FHq3bI/AAAAAAAABtU/vRpmUMPhJQE/s0/2017-02-26_15-00-16.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;p&gt;I also came across the same issue. I think doing this configuration from the server level would be better since it applies
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="IIS" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/IIS/"/>
    
    
      <category term="IIS" scheme="http://blog.jiangnan.pw/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>0x80004005 未指定的错误</title>
    <link href="http://blog.jiangnan.pw/cj0n616gs000vbk7kl7i3xykx/"/>
    <id>http://blog.jiangnan.pw/cj0n616gs000vbk7kl7i3xykx/</id>
    <published>2017-02-24T18:21:51.000Z</published>
    <updated>2017-02-24T18:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<blockquote>
<p>0x80004005 未指定的错误 (Provider 错误’80004005’ 未指定的错误) 你是否也在烦恼中，今天下午这个问题烦恼了我一个下午。首先说下我的经历。下午帮来要写程序，拿移动硬盘出来 打开提示 I/O设备错误。一看完蛋了移动硬盘坏了，然后找了个修改软件 安装了下。修复好了。然后用BAT 清理下垃圾文件。然后问题就出现了。</p>
</blockquote>
<p>后来终于发现问题是 出在 BAT 清理垃圾文件 哪里。就是把权限改了。大家不用去看太多<br>的解释了。如果自己没搞什么东西。有70%就是 权限问题。下面说下怎么解决这个问题：</p>
<h2 id="设置temp（临时文件夹）权限"><a href="#设置temp（临时文件夹）权限" class="headerlink" title="设置temp（临时文件夹）权限"></a>设置temp（临时文件夹）权限</h2><h3 id="打开办法："><a href="#打开办法：" class="headerlink" title="打开办法："></a>打开办法：</h3><p><code>windows---&gt;temp</code>，单击右键选择-属性，你就会看到一个叫做“<code>安全</code>”的选项，</p>
<p>添加一个<code>everyone</code>,权限设置为完全控制，再将你正在使用<code>windows</code>的用户也设置为完全控制</p>
<p>一般设置好这个就没问题了。如果你还有问题。那么你可能是 组件有问题了。或者是本身</p>
<p>代码没写好。或者是 程序目录权限问题。</p>
<p>下面在说常见的解决办法：</p>
<h2 id="重新注册组件："><a href="#重新注册组件：" class="headerlink" title="重新注册组件："></a>重新注册组件：</h2><p>开始—–运行—–<code>regsvr32 jscript.dll</code><br>开始—–运行—–<code>regsvr32 vbscript.dll</code><br>开始—–运行—–<code>iisreset</code></p>
<p>开始—&gt;运行， 输入 <code>regsvr32 msjetoledb40.dll</code></p>
<p>如果还是不能解决。那么问题肯定出现到 代码上。或者你程序的目录权限上！</p>
<p>程序一般错误在 链接数据库代码。不规范。大家按照下面这个写就可以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dbpath=server.mappath(&quot;vip/jiajie.mdb&quot;) </div><div class="line">set conn=server.createobject(&quot;adodb.connection&quot;) </div><div class="line">conn.open &quot;provider=microsoft.jet.oledb.4.0;data source=&quot;&amp;dbpath</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;blockquote&gt;
&lt;p&gt;0x80004005 未指定的错误 (Provider 错误’80004005’ 未指定的错误) 你是否也在烦恼中，今天下午这个问题烦恼了我一个下午。首先说下我的经历。下午帮来要写程序，拿移动硬盘出来 打开提示 I/O
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="IIS" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/IIS/"/>
    
    
      <category term="IIS" scheme="http://blog.jiangnan.pw/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>Sublime配置文件同步</title>
    <link href="http://blog.jiangnan.pw/cj0n616iy002bbk7kspsoywrr/"/>
    <id>http://blog.jiangnan.pw/cj0n616iy002bbk7kspsoywrr/</id>
    <published>2017-02-22T04:14:37.000Z</published>
    <updated>2017-02-22T04:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<h1 id="Sublime-Config"><a href="#Sublime-Config" class="headerlink" title="Sublime Config"></a>Sublime Config</h1><p>The simplest method of installation is through the Sublime Text console. The console is accessed via the ctrl+` shortcut or the View &gt; Show Console menu. Once open, paste the appropriate Python code for your version of Sublime Text into the console.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure>
<h2 id="账户-SSH-公钥"><a href="#账户-SSH-公钥" class="headerlink" title="账户 SSH 公钥"></a>账户 SSH 公钥</h2><blockquote>
<p>账户 SSH 公钥是跟用户账户关联的公钥，一旦设置，SSH 就拥有账户下所有项目仓库的读写权限。 设置“账户 SSH 公钥”是开发者使用 SSH 方式访问/修改代码仓库的“前置工作”，分为“获取 SSH 协议地址”、“生成公钥”、“在 Coding.net 添加公钥”三个步骤。</p>
</blockquote>
<h2 id="获取-SSH-协议地址"><a href="#获取-SSH-协议地址" class="headerlink" title="获取 SSH 协议地址"></a>获取 SSH 协议地址</h2><blockquote>
<p>在项目的代码页面点击 SSH 切换到 SSH 协议， 获得 clone 地址，形如git@git.coding.net:wzw/leave-a-message.git。 请使用这个地址来访问您的代码仓库。</p>
</blockquote>
<h2 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h2><blockquote>
<p>Mac/Linux 打开命令行终端, Windows 打开 Git Bash 。 输入ssh-keygen -t rsa -C “username@example.com”,( 注册的邮箱)，接下来点击enter键即可（也可以输入密码）。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div><div class="line"># Creates a new ssh key, using the provided email as a label</div><div class="line"># Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址,如果使用非默认地址可能需要配置 .ssh/config</div></pre></td></tr></table></figure>
<p>成功之后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Your identification has been saved in /Users/you/.ssh/id_rsa.</div><div class="line"># Your public key has been saved in /Users/you/.ssh/id_rsa.pub.</div><div class="line"># The key fingerprint is:</div><div class="line"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</div></pre></td></tr></table></figure>
<h2 id="在-Coding-net-添加公钥"><a href="#在-Coding-net-添加公钥" class="headerlink" title="在 Coding.net 添加公钥"></a>在 Coding.net 添加公钥</h2><blockquote>
<p>本地打开 id_rsa.pub 文件（或执行 $cat id_rsa.pub ），复制其中全部内容，添加到账户“SSH 公钥”页面 中，公钥名称可以随意起名字。<br>完成后点击“添加”，然后输入密码或动态码即可添加完成。 图片<br>完成后在命令行测试，首次建立链接会要求信任主机。</p>
</blockquote>
<h2 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h2><p>…or create a new repository on the command line<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo &quot;# test&quot; &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m &quot;first commit&quot;</div><div class="line">git remote add origin git@github.com:lovedan/test.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<p>…or push an existing repository from the command line<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:lovedan/test.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<ol>
<li><p>git pull push在没有指定branch报错的解决方法</p>
<blockquote>
<p>解决方案：指定当前工作目录工作分支，跟远程的仓库，分支之间的链接关系。比如我们设置master对应远程仓库的master分支git branch –set-upstream master origin/master这样在我们每次想push或者pull的时候，只需要 输入git push 或者git pull即可。</p>
</blockquote>
</li>
<li><p>git pull 遇到fatal: refusing to merge unrelated histories</p>
<blockquote>
<p>git pull origin branchname –allow-unrelated-histories</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;h1 id=&quot;Sublime-Config&quot;&gt;&lt;a href=&quot;#Sublime-Config&quot; class=&quot;headerlink&quot; title=&quot;Sublime Config&quot;&gt;&lt;/a&gt;Sublime Config&lt;/h1&gt;&lt;p&gt;The sim
    
    </summary>
    
      <category term="软件相关" scheme="http://blog.jiangnan.pw/categories/%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Windows" scheme="http://blog.jiangnan.pw/categories/%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/Windows/"/>
    
    
      <category term="Sublime" scheme="http://blog.jiangnan.pw/tags/Sublime/"/>
    
      <category term="编程软件" scheme="http://blog.jiangnan.pw/tags/%E7%BC%96%E7%A8%8B%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>找回Sierra允许“任何来源”的应用</title>
    <link href="http://blog.jiangnan.pw/cj0n616iu0029bk7kl5sm42of/"/>
    <id>http://blog.jiangnan.pw/cj0n616iu0029bk7kl5sm42of/</id>
    <published>2017-02-16T16:13:07.000Z</published>
    <updated>2017-02-16T16:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<p>苹果秋季发布会之后，同时进行了两大平台系统的升级（Mac OS 和 iOS），这两天安装第三方Mac应用的时候，突然发现应用权限选项“任何来源”不翼而飞了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/355579-85be4234e1b9bf47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这就直接导致安装第三方app失败了，google了一下找到了找回“任何来源”方法。</p>
<p>打开终端，键入命令，输入密码，然后回车<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo spctl --master-disable</div></pre></td></tr></table></figure></p>
<p>然后打开“安全性与隐私”，发现久违的“任何来源”回来了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/355579-7ae01f6b94f2df4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>注：如果在系统偏好设置的“安全与隐私”中重新选中允许App Store 和被认可的开发者App，允许“任何来源”App的选项会再次消失，可运行上述命令再次打开“任何来源”。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;p&gt;苹果秋季发布会之后，同时进行了两大平台系统的升级（Mac OS 和 iOS），这两天安装第三方Mac应用的时候，突然发现应用权限选项“任何来源”不翼而飞了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jiansh
    
    </summary>
    
      <category term="苹果相关" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/Mac%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>移除Mac的.DS_Store、._ 檔</title>
    <link href="http://blog.jiangnan.pw/cj0n616ik001ybk7k81tqw414/"/>
    <id>http://blog.jiangnan.pw/cj0n616ik001ybk7k81tqw414/</id>
    <published>2017-02-16T01:28:40.000Z</published>
    <updated>2017-02-16T01:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這教學不單對Mac 的用戶有效，只要你的電腦跟Mac 機的Dropbox 同步過，都會發現電腦里出現大量的小檔案，而且全部檔案的開首都是 “._” (dot underscore)。</p>
<p>雖然對系統的儲存空間影響很少，但同步的過程會因為要處理的檔案非常多而影響效能，尤其對於使用外置記憶卡的我。</p>
<p>據說，這些.DS_Store 檔案是記錄資料夾的文件資料的（如果打開系統資訊 ，會顯示不同類型的檔案佔用的空間），如果剷除了，”Storage” 就會就會把所有檔案顯示成 “Others” 。</p>
<h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>這些檔案其實是隱藏的，所以要讓系統顯示所有檔案：<br>1.在Terminal 輸入：【<code>defaults write com.apple.finder appleshowallfiles true</code>】</p>
<p>這樣就會修改系統的設定，讓系統顯示全部檔案，包括被隱藏的。</p>
<h2 id="制止-DS-Store繼續產生"><a href="#制止-DS-Store繼續產生" class="headerlink" title="制止.DS_Store繼續產生"></a>制止<code>.DS_Store</code>繼續產生</h2><p>1.下載 Death_To_DS_Store (直接下載：<a href="http://www.aorensoftware.com/Downloads/Files/DeathToDSStore.zip" target="_blank" rel="external">http://www.aorensoftware.com/Downloads/Files/DeathToDSStore.zip</a> )<br>2.直接開啟解壓出來的 <code>Death_To_DSStore.app</code> （剔選Launch Agent來自動啟動這軟件，那麼一開機就會開始阻止 <code>.DS_Store</code>）</p>
<h2 id="剷除所有-檔案（dot-clean-）——不能一勞永逸"><a href="#剷除所有-檔案（dot-clean-）——不能一勞永逸" class="headerlink" title="剷除所有._ 檔案（dot_clean()）——不能一勞永逸"></a>剷除所有<code>._ 檔案</code>（<code>dot_clean()</code>）——不能一勞永逸</h2><p>這方法會剷除所有存在在儲存空間的 “<code>._</code>“ 檔，而系統也不會重新產生這些檔案；但對於新的檔案，還是會有 <code>._</code> 檔案的。</p>
<p>現有的付費方案 (<code>BlueHarvest</code>，售價<code>HKD108</code>)，也只是把以下的工序自動化，并在每次寫檔案時執行一次而已。<br>1.打開Terminal，輸入【dot_clean /path_to_folder/】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(e.g.) dot_clean /Users/alan/Documents</div></pre></td></tr></table></figure></p>
<p>這樣系統就會自動把 ._ 的檔案信息融合到原本的檔案。如果原本的檔案消失了，都會被剷除。</p>
<p>建議一個星期執行一次就可以了，一次過把所有這類型的檔案鏟掉。</p>
<h2 id="在Windows-上剷掉-檔"><a href="#在Windows-上剷掉-檔" class="headerlink" title="在Windows 上剷掉 ._ 檔"></a>在Windows 上剷掉 <code>._</code> 檔</h2><p>如果大家同時再Mac 跟 Windows 系統上用Dropbox 同步文件的話，相信大家都會看過，即使在Windows 上也發現這些煩人的檔案；就算沒有用 Dropbox, 用 USB Thumbdrive 把檔案傳來傳去時，Mac 系統也會“順便”把這些檔案“附送”給Windows。</p>
<p>要剷除的話，其實很簡單，只需要一句 CMD Command 【Run: “cmd”】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dir /S ._*</div></pre></td></tr></table></figure></p>
<p>這個可以在剷除檔案前，確保沒有亂剷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">del /S ._*</div></pre></td></tr></table></figure></p>
<p>好了，真的要動手咯～</p>
<p>解釋一下</p>
<ul>
<li><code>/S</code>: 就是 Recursive 的意思，就是徹底搜出 ._ 的檔案</li>
<li><code>*</code>: 是asterisk, wildcard 的意思啦～</li>
</ul>
<h2 id="後話"><a href="#後話" class="headerlink" title="後話"></a>後話</h2><p>其實如果不使用【Dropbox】 和 【外置儲存裝置】的話，系統這個預設的行為是沒有影響的；但這系統的行為影響最大的是【外置儲存裝置】。</p>
<p>由於SSD 對我最主要的用途是快速啟動軟件，跟暫時處理檔案用的。如果用作同步，這些經常讀寫檔案的行為，還是用【外置儲存裝置】比較划算（這算不算）</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這教學不單對Mac 的用戶有效，只要你的電腦跟Mac 機的Dropbox 同步過，都會發現電腦里出現大量的小檔
    
    </summary>
    
      <category term="苹果相关" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/Mac%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>OS X 10.10.5 下做端口转发</title>
    <link href="http://blog.jiangnan.pw/cj0n616ia001nbk7kodlr5jah/"/>
    <id>http://blog.jiangnan.pw/cj0n616ia001nbk7kodlr5jah/</id>
    <published>2017-02-11T18:30:08.000Z</published>
    <updated>2017-02-11T18:43:28.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<p>网上搜索了一下相关的资料，都是介绍用pf来做转发，而且都是转发到127.0.0.1。由于我是需要转发到虚拟机上，按网上的教程测试了一下pf，结果是没能转发成功。最后找到了socat这个程序，终于解决问题。</p>
<p>安装socat，前提是你已经有homebrew，没有的话参考这篇来安装homebrew。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install socat</div></pre></td></tr></table></figure></p>
<p>安装完成后，执行下面命令就可以完成转发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo socat TCP4-LISTEN:80,fork TCP4:192.168.173.129:80</div></pre></td></tr></table></figure></p>
<p>这条命令是将本机的80端口转发至虚拟机的80端口，虚拟机IP为192.168.173.129。</p>
<p>高级例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lsof -c socat | grep LISTEN</div><div class="line">socat -d -d -lf /var/log/socat.log TCP4-LISTEN:13389,reuseaddr,fork,su=nobody TCP4:192.168.1.209:3389 &amp;</div><div class="line">socat -d -d -lf /var/log/socat.log TCP4-LISTEN:5902,reuseaddr,fork,su=nobody TCP4:192.168.1.13:5900 &amp;</div><div class="line">lsof -c socat | egrep &apos;LISTEN|UDP&apos;</div><div class="line">socat UDP4-RECVFROM:500,fork UDP4-SENDTO:192.168.1.209:500</div><div class="line">socat UDP4-RECVFROM:4500,fork UDP4-SENDTO:192.168.1.209:4500</div><div class="line">lsof -i udp | egrep &apos;isakmp|ipsec-msft&apos; #500，4500端口占用</div></pre></td></tr></table></figure>
<p>操作完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;p&gt;网上搜索了一下相关的资料，都是介绍用pf来做转发，而且都是转发到127.0.0.1。由于我是需要转发到虚拟机上，按网上的教程测试了一下pf，结果是没能转发成功。最后找到了socat这个程序，终于解决问题。&lt;/p&gt;
&lt;p&gt;安装socat，前提是你
    
    </summary>
    
      <category term="苹果相关" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/Mac%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>让git push命令不再需要密码</title>
    <link href="http://blog.jiangnan.pw/cj0n616gp000tbk7k1gkx9ork/"/>
    <id>http://blog.jiangnan.pw/cj0n616gp000tbk7k1gkx9ork/</id>
    <published>2017-02-09T04:13:11.000Z</published>
    <updated>2017-02-09T04:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<p>最近利用jekyll写博客，为的就是博客管理方便，但是在上传博客的时候使用<code>git push</code>命令每次都得输入github帐号和密码特别的不方便，于是就搜了一下。</p>
<p>在这篇文章里提到，<code>GitHub</code>获得远程库时，有<code>ssh</code>方式和<code>https</code>方式。</p>
<p><img src="https://lh3.googleusercontent.com/-ZUfeXHqFx4w/WJvtMYHET_I/AAAAAAAABdE/bJQdF5oIxHo/s0/2017-02-09_13-16-51.png" alt=""><br><img src="https://lh3.googleusercontent.com/-sz3NFWCpl1E/WJvtWKfPzYI/AAAAAAAABdI/AmCzzhSMpJc/s0/2017-02-09_13-17-30.png" alt=""></p>
<p>两个方式的<code>url</code>地址不同，认证方式也不同。使用<code>ssh</code>时保存密钥对以后可以不再输入帐号密码，而<code>https</code>却不能。所以如果想要不再输入帐号密码，一种方式就是在<code>git clone</code>的时候使用<code>ssh</code>方式，另一种方式就是去修改已有项目<code>.git</code>目录下的<code>config</code>文件中的<code>url</code>，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[remote &quot;origin&quot;]</div><div class="line">    url = git@github.com:suyan/suyan.github.io.git</div><div class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;p&gt;最近利用jekyll写博客，为的就是博客管理方便，但是在上传博客的时候使用&lt;code&gt;git push&lt;/code&gt;命令每次都得输入github帐号和密码特别的不方便，于是就搜了一下。&lt;/p&gt;
&lt;p&gt;在这篇文章里提到，&lt;code&gt;GitHub&lt;
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="Git" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Git/"/>
    
    
      <category term="Git" scheme="http://blog.jiangnan.pw/tags/Git/"/>
    
      <category term="GitHub" scheme="http://blog.jiangnan.pw/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>GitHub初心者の僕が、初めてGitHubリポジトリにpushしたら、rejectedエラーになったので、ちゃんとpushできるようになるまでの対応をメモしました。</title>
    <link href="http://blog.jiangnan.pw/cj0n616go000sbk7k5ahc1f6i/"/>
    <id>http://blog.jiangnan.pw/cj0n616go000sbk7k5ahc1f6i/</id>
    <published>2017-02-09T01:35:00.000Z</published>
    <updated>2017-02-09T04:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><hr>
<p>GitHub初心者の僕が、初めてGitHubリポジトリにpushしたら、rejectedエラーになったので、ちゃんとpushできるようになるまでの対応をメモしました。</p>
<h2 id="Gitバージョン"><a href="#Gitバージョン" class="headerlink" title="Gitバージョン"></a>Gitバージョン</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">% git --version</div><div class="line">git version 2.9.2</div></pre></td></tr></table></figure>
<h2 id="作業の流れ"><a href="#作業の流れ" class="headerlink" title="作業の流れ"></a>作業の流れ</h2><p>GitHubからリポジトリを作成</p>
<p>「Initialize this repository with a README」にチェック</p>
<p>ローカルリポジトリに追加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% git add -A</div></pre></td></tr></table></figure></p>
<p>ロカールリポジトリにコミット<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% git commit -m &quot;xxxxx&quot;</div></pre></td></tr></table></figure></p>
<p>リモートリポジトリ（GitHub）の情報を追加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% git remote add origin https://github.com/xxxx/xxxxx.git</div></pre></td></tr></table></figure></p>
<p>ローカルリポジトリをリモートリポジトリへ反映させる → <code>rejectedエラー</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">% git push origin master</div><div class="line">To https://github.com/xxxx/xxxxx.git</div><div class="line"> ! [rejected]        master -&gt; master (fetch first)</div><div class="line">error: failed to push some refs to &apos;https://github.com/xxxx/xxxxx.git&apos;</div><div class="line">hint: Updates were rejected because the remote contains work that you do</div><div class="line">hint: not have locally. This is usually caused by another repository pushing</div><div class="line">hint: to the same ref. You may want to first integrate the remote changes</div><div class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</div><div class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</div></pre></td></tr></table></figure>
<p>ググってみたら「git fetch &amp;&amp; git merge origin/master」してからpushすればOKと書いてあったので試してみる → <code>mergeエラー</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">% git fetch &amp;&amp; git merge origin/master</div><div class="line">fatal: refusing to merge unrelated histories</div></pre></td></tr></table></figure></p>
<p>さらにググってみたらmergeのオプションに「–allow-unrelated-histories」をつければOKと書いてあったので試してみる → <code>merge OK!</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">% git merge --allow-unrelated-histories origin/master</div><div class="line">Merge made by the &apos;recursive&apos; strategy.</div><div class="line"> README.md | 2 ++</div><div class="line"> 1 file changed, 2 insertions(+)</div><div class="line"> create mode 100644 README.md</div></pre></td></tr></table></figure>
<p>再度、ローカルリポジトリをリモートリポジトリへ反映させる → <code>push OK!</code></p>
<p>一件落着</p>
<h2 id="「–allow-unrelated-histories」について"><a href="#「–allow-unrelated-histories」について" class="headerlink" title="「–allow-unrelated-histories」について"></a>「–allow-unrelated-histories」について</h2><hr>
<p>ちゃんと調べてみたところ<br>Git 2.9から mergeコマンドとpullコマンドでは，–allow-unrelated-historiesを指定しない限り，無関係なヒストリを持つ２つのブランチをマージすることはできなくなった。<br>とありました。</p>
<h2 id="考察"><a href="#考察" class="headerlink" title="考察"></a>考察</h2><hr>
<p>まだ、GitHub、Gitの理解が浅いので見当違いなことを言っているかもしれませんが、GitHub上でリポジトリを作成したタイミングで、README.mdがコミットされているのに、それをローカルリポジトリに取り込まずに、ローカルのソースをコミットしてしまったのが原因と思われる。<br>結果、それぞれが別ヒストリとなり、mergeエラーになったのかなと。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;GitHub初心者の僕が、初めてGitHubリポジトリにpushしたら、reject
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="Git" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Git/"/>
    
    
      <category term="Git" scheme="http://blog.jiangnan.pw/tags/Git/"/>
    
      <category term="GitHub" scheme="http://blog.jiangnan.pw/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5自定义环境变量</title>
    <link href="http://blog.jiangnan.pw/cj0n616gx000ybk7k7fw7sfpn/"/>
    <id>http://blog.jiangnan.pw/cj0n616gx000ybk7k7fw7sfpn/</id>
    <published>2017-02-03T07:19:55.000Z</published>
    <updated>2017-02-03T04:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<p>Laravel 5 中提供了一种通过<code>.env</code>文件定义环境变量的方式，根据官方文档的说明应该在不同的环境下使用不同的<code>.env</code>文件，并且此文件不应该提交到版本控制中去。如此设定自然是为了方便不同的环境或者多名开发人员完全可以使用自已的<code>.env</code>环境变量。</p>
<p>但是官方文档中对于如何自定义<code>.env</code>文件中的环境变量却提的很少。文档中只提及了在需要自定义环境变量时最好是在<code>.env.example</code>文件中写一份变量的定义，以方便其他开发人员配置。</p>
<p>下面就以我的“遭遇”来讲下 Laravel 5 中如何自定义环境变量。</p>
<p>（内容比较啰嗦，可直接跳到最后<a href="#环境变量的正确用法">环境变量的正确用法</a>部分）</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>因为我需要路由里面根据不同的二级域名选择不同的控制器，而测试环境和生产环境中的顶级域名不同，于是我打算把顶级域名作为一项环境变量写在<code>.env</code>文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.env</div><div class="line"></div><div class="line">APP_BASE_URL=test.com</div></pre></td></tr></table></figure>
<p>路由中的写法（为了演示我把路由的处理直接写成了闭包，而实际用于生产环境的代码是不能写成闭包的，原因就是路由缓存不支持闭包，不打算使用路由缓存的可以无视）：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">route.php</div><div class="line"></div><div class="line">$_app_base_url = env(<span class="string">'APP_BASE_URL'</span>);</div><div class="line">Route::group([<span class="string">'domain'</span> =&gt; <span class="string">"u.&#123;$_app_base_url&#125;"</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="string">"TEST"</span>;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>恶梦就此开始。</p>
<h2 id="env-函数与-ENV超全局变量"><a href="#env-函数与-ENV超全局变量" class="headerlink" title="env()函数与$_ENV超全局变量"></a><code>env()</code>函数与<code>$_ENV</code>超全局变量</h2><p>这种写法本身是没有任何问题的，访问<code>u.test.com</code>，在开发环境中一切正常。然后使用命令<code>php artisan config:cache</code>生成配置缓存后却出现了找不到控制器的错误。经过调试发现<code>$_app_base_url</code>的输出值是<code>null</code>。</p>
<p><code>env()</code>函数的作用是从<code>$_ENV</code>超全局变量中取出对应的值，而 Laravel 在启动的时候又会自动加载<code>.env</code>文件中的信息到<code>$_ENV</code>超全局变量中，所以如果没问题的话在<code>$_ENV</code>环境变量中应该能找到刚才定义的环境变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var_dump($_ENV);</div></pre></td></tr></table></figure>
<p>输出了很多环境变量的信息，但。。。没有看到任何在<code>.env</code>里面定义的信息。难道信息没有被加载到<code>$_ENV</code>？于是尝试清除配置缓存：<code>php artisan config:clear</code>后再尝试，发现<code>.env</code>里面的信息确实被加载到了<code>$_ENV</code>超全局变量中。。。</p>
<p>看来这个问题和配置缓存脱不了关系了。</p>
<h2 id="配置缓存"><a href="#配置缓存" class="headerlink" title="配置缓存"></a>配置缓存</h2><p>Laravel 中为了加快程序的执行效率做了很多缓存优化的工作，其中就包括配置缓存、路由缓存等，通过把多个零碎的配置文件合并成一个大的配置文件来减少加载的文件数量，从而加快运行速度（如果你研究过PHP的性能的话就会知道IO操作其实占了很大一部分开销）。</p>
<p>Laravel 的配置缓存被保存在<code>bootstrap/cache/config.php</code>文件中。打开这个文件可以看到这个文件就是把<code>config</code>文件夹的所有文件合并成了一个大的配置文件。<code>config.php</code>直接返回一个数组，数组的键名对应<code>config</code>文件夹下的文件名，数组的值对应<code>config</code>文件夹下文件返回的配置信息。</p>
<p>找遍整个配置文件发现没有任何和<code>.env</code>文件里面的定义相关的内容。</p>
<p>难道<code>env()</code>函数会从配置缓存中读取数据，因为这个文件里面没有对应的数据所以才返回<code>null</code>？抱着这个想法去查看<code>env()</code>的源码，发现这个函数和配置缓存没任何关系。。。</p>
<h2 id="env文件的加载"><a href="#env文件的加载" class="headerlink" title=".env文件的加载"></a><code>.env</code>文件的加载</h2><p>这时我产生一个想法：有没有可能是框架检测存在配置缓存文件时就不去加载<code>.env</code>了呢？</p>
<p>如果是这样的话框架源码里面肯定会有地方去判断<code>bootstrap/cache/config.php</code>文件是否存在。</p>
<p>直接在<code>vendor</code>里面搜<code>cache/config.php</code>，果然找到在<code>vendor/laravel/framework/src/Illuminate/Foundation/Application.php</code>的第836行（关于文件和行的信息都是基本我现在使用的 Laravel 5.2.31，版本号不同具体位置也可能不同）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Application.php</div><div class="line"></div><div class="line">/**</div><div class="line"> * Get the path to the configuration cache file.</div><div class="line"> *</div><div class="line"> * @return string</div><div class="line"> */</div><div class="line">public function getCachedConfigPath()</div><div class="line">&#123;</div><div class="line">    return $this-&gt;bootstrapPath().&apos;/cache/config.php&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>getCachedConfigPath()</code>函数返回了这个配置缓存文件的路径。继续查找这个函数，发现除了控制台部分外共有两个地方使用了这个函数，分别是<code>Illuminate\Foundation\Bootstrap\LoadConfiguration::LoadConfiguration和Illuminate\Foundation\Application::configurationIsCached</code>。前者是判断如果配置缓存文件存在就包含它，并不再从<code>config</code>文件夹下加载配置文件；后者是定义了一个<code>configurationIsCached()</code>函数用于返回配置缓存文件是否存在。</p>
<p>根据线索继续查找<code>configurationIsCached()</code>函数，找到了唯一的调用方：<code>vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/DetectEnvironment.php</code>的第19行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">DetectEnvironment.php</div><div class="line"></div><div class="line">class DetectEnvironment</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * Bootstrap the given application.</div><div class="line">     *</div><div class="line">     * @param  \Illuminate\Contracts\Foundation\Application  $app</div><div class="line">     * @return void</div><div class="line">     */</div><div class="line">    public function bootstrap(Application $app)</div><div class="line">    &#123;</div><div class="line">        if (! $app-&gt;configurationIsCached()) &#123;</div><div class="line">            $this-&gt;checkForSpecificEnvironmentFile($app);</div><div class="line">            try &#123;</div><div class="line">                (new Dotenv($app-&gt;environmentPath(), $app-&gt;environmentFile()))-&gt;load();</div><div class="line">            &#125; catch (InvalidPathException $e) &#123;</div><div class="line">                //</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>bootstrap()</code>中可以看到，这里会检查配置缓存文件是否存在，如果不存在就会去加载<code>.env</code>文件，否则就什么都不做。正好验证了前面的猜测：在生成配置缓存之后就不会去加载<code>.env</code>文件了。</p>
<p>（通过上面代码中的<code>$this-&gt;checkForSpecificEnvironmentFile($app);</code>往下跟踪，发现还可以使用<code>.env.APP_ENV</code>的方式定义跟随环境的配置信息，例如<code>.env</code>中如果定义了<code>APP_ENV=local</code>的话，在加载环境变量时也会尝试加载<code>.env.local</code>文件）。</p>
<h2 id="env应该什么时候被加载？"><a href="#env应该什么时候被加载？" class="headerlink" title=".env应该什么时候被加载？"></a>.env应该什么时候被加载？</h2><p>至此应该是真相大白了。那么<code>.env</code>应该什么时候被加载呢？</p>
<p>当然开发环境中不需要生成配置缓存，所以每次请求都会重新加载和解析<code>.env</code>文件并设置到<code>$_ENV</code>超全局变量中。生产环境中呢？</p>
<p>这时另一个猜想产生了：既然<code>bootstrap/cache/config.php</code>缓存文件中没有关于环境变量的信息，并且系统没有尝试加载<code>.env</code>文件，会不会有可能是已经把环境变量保存到了<code>config.php</code>缓存文件中了呢？如果真的是这样的话，那么<code>env()</code>函数就只能在<code>config/*.php</code>中的配置文件里面被调用（因为生成了配置缓存后就不再加载环境变量，程序的其它地方再去访问环境变量是得不到<code>.env</code>里面的信息的）。</p>
<p>全局搜索<code>env</code>(，猜对了，果然只在<code>config</code>文件夹里面的文件中使用这个函数，其它地方是没有调用过的。</p>
<p>综合整理一下上面的过程，也就是说如果在<code>.env</code>里面自定义了一个环境变量，就需要在<code>config</code>文件夹下的任意一个配置文件中把这个环境变量添加进去，这样生成的配置缓存中才会包含这个信息。</p>
<h2 id="环境变量的正确用法"><a href="#环境变量的正确用法" class="headerlink" title="环境变量的正确用法"></a>环境变量的正确用法</h2><p>好吧，只能说明是我认为是正确的用法。</p>
<p>首先肯定是要在自己的<code>.env</code>文件中定义这个环境变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.env</div><div class="line"></div><div class="line">APP_BASE_URL=test.com</div></pre></td></tr></table></figure>
<p>然后还需要把这个环境变量的定义写到<code>.env.example</code>文件中，以方便团队协作时其他成员能更好的理解你定义的这个变量。</p>
<p>然后很重要的一步，你还需要把这个环境变量写到配置文件中去。因为生成配置缓存时加载配置文件的过程是遍历整个<code>config</code>文件夹，所以你可以在<code>config</code>文件中任意新建一个PHP文件用来保存自己定义的环境变量，或者修改现有的任一配置文件。</p>
<p>就以新建配置文件为例吧，在<code>config</code>文件夹下新建<code>demo.php</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">demo.php</div><div class="line"></div><div class="line">&lt;?php</div><div class="line">return [</div><div class="line">	&apos;app_base_url&apos;  =&gt; env(&apos;APP_BASE_URL&apos;, &apos;default value&apos;),</div><div class="line">];</div></pre></td></tr></table></figure>
<p>是的，我们是在这个配置文件中调用的<code>env()</code>函数。这样在生成配置缓存时就会在这里读取环境变量。</p>
<p>命令行执行；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan config:cache</div></pre></td></tr></table></figure>
<p>然后再打开<code>bootstrap/cache/config.php</code>文件，会发现其中多了一部分:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">config.php</div><div class="line"></div><div class="line">//.......</div><div class="line">&apos;demo&apos; =&gt; array(</div><div class="line">    	&apos;app_base_url&apos;  =&gt; &apos;test.com&apos;,</div><div class="line">	),</div></pre></td></tr></table></figure>
<p>至此自定义环境变量的过程已经圆满结束。当然因为使用了配置缓存，所以在程序中需要读取自定义环境变量的时候也就不能使用<code>env()</code>函数。内容存储在配置中，自然要用<code>config()</code>函数。</p>
<p>上面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">route.php</div><div class="line"></div><div class="line">$_app_base_url = config(&apos;demo.app_base_url&apos;);</div><div class="line">Route::group([&apos;domain&apos; =&gt; &quot;u.&#123;$_app_base_url&#125;&quot;], function() &#123;</div><div class="line">    Route::get(&apos;/&apos;, function()&#123;</div><div class="line">        return &quot;TEST&quot;;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>config()</code>函数使用点号作为分隔符，点号前面部分是配置文件名（例子中配置文件是<code>demo.php</code>，所以是<code>demo</code>），点号后面是配置项的键名（<code>app_base_url</code>）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结就是如果你想同时使用自定义环境变量和配置缓存的话，你就需要自定义一个配置项来读取环境变量的值。</p>
<p>最后记得不要忘了把创建配置缓存命令写到你的构建脚本或自动部署中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;p&gt;Laravel 5 中提供了一种通过&lt;code&gt;.env&lt;/code&gt;文件定义环境变量的方式，根据官方文档的说明应该在不同的环境下使用不同的&lt;code&gt;.env&lt;/code&gt;文件，并且此文件不应该提交到版本控制中去。如此设定自然是为了方便不同的
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="Laravel" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Laravel/"/>
    
    
      <category term="laravel" scheme="http://blog.jiangnan.pw/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>开启Fusion Drive功能教程 双硬盘 SSD+HDD</title>
    <link href="http://blog.jiangnan.pw/cj0n616ii001vbk7kwjfu4519/"/>
    <id>http://blog.jiangnan.pw/cj0n616ii001vbk7kwjfu4519/</id>
    <published>2017-02-03T05:44:35.000Z</published>
    <updated>2017-02-09T03:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<p>废话不多说进入主题</p>
<p><img src="https://lh3.googleusercontent.com/-E0utAkBrw68/WJp0KJxr95I/AAAAAAAABYg/fg4_1VUTdq0/s0/2017-02-08_10-28-03.png" alt=""></p>
<blockquote>
<p>disk0 是用的 120g 三星ssd 固态硬盘<br>disk1 是用的 250g 机器自带的普通硬盘</p>
</blockquote>
<p><img src="https://lh3.googleusercontent.com/-R8GL5Cm9cMc/WJp0abZJ9MI/AAAAAAAABYk/oRlTT6-3-yQ/s0/2017-02-08_10-29-08.png" alt=""></p>
<p>1.开启Fusion Drive功能之前，先要把数据全部备份。</p>
<p><img src="https://lh3.googleusercontent.com/-22yQinjGFrQ/WJp0snqYIqI/AAAAAAAABYs/8LvjpzO5bgQ/s0/2017-02-08_10-30-22.png" alt=""></p>
<p>2.用系统启动光盘或者u盘启动电脑。</p>
<p><img src="https://lh3.googleusercontent.com/-7RdUviFxN98/WJp04GLOjZI/AAAAAAAABYw/6KVCkKBO5FI/s0/2017-02-08_10-31-07.png" alt=""></p>
<p>3.进入磁盘工具把2块硬盘都进行格式化</p>
<p><img src="https://lh3.googleusercontent.com/-TEUn4kf4Z50/WJp1ZegbCuI/AAAAAAAABY4/menESopf7v0/s0/2017-02-08_10-33-20.png" alt=""></p>
<p>4.退出磁盘工具，进入终端。</p>
<p>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil list</div></pre></td></tr></table></figure></p>
<p>查看当前磁盘的详细信息</p>
<p><img src="https://lh3.googleusercontent.com/-TM1DhU3tVjc/WJp2R9Uy2ZI/AAAAAAAABZE/5r0reM3fbEQ/s0/2017-02-08_10-37-06.png" alt=""></p>
<p>5.合并磁盘</p>
<p>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil cs create bla disk0 disk1</div></pre></td></tr></table></figure></p>
<p><img src="https://lh3.googleusercontent.com/-em2gG4BcWQA/WJp2lN41i5I/AAAAAAAABZI/DDjUR0LyBHQ/s0/2017-02-08_10-38-23.png" alt=""></p>
<p>这里可以看见最后一行 百分百的进度条。。。</p>
<p><img src="https://lh3.googleusercontent.com/-maQp1HMUN9A/WJqhrcq7ZFI/AAAAAAAABZk/Eqk6lvsq83Q/s0/2017-02-08_13-42-15.png" alt=""></p>
<p>画横线的地方显示正在创建逻辑盘。。。</p>
<p><img src="https://lh3.googleusercontent.com/-Flp1ZQVqu6Q/WJqhzS5hOcI/AAAAAAAABZo/aKnVGV3ZxnE/s0/2017-02-08_13-42-48.png" alt=""></p>
<p>这里显示逻辑盘已经创建成功</p>
<p>最后一行显示</p>
<p>Core Storage LVG UUID: <code>【BBC6AD77-ADF2-40EE-A1D0-68BFE4913966】</code></p>
<p>Finished CoreStorage operation</p>
<p><code>【】</code>中的字串之后还会用到，可以直接复制使用</p>
<p>6.再次输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil cs list</div></pre></td></tr></table></figure></p>
<p>查看逻辑磁盘状态</p>
<p><img src="https://lh3.googleusercontent.com/-55OmC1i9yOM/WJqiNghRqXI/AAAAAAAABZs/mxIFLTqrwSQ/s0/2017-02-08_13-44-32.png" alt=""></p>
<p>显示新的逻辑卷的容量和<code>id</code>，下面有组成逻辑卷的硬盘<code>id</code><br>秘书用的是<code>120+250</code>的硬盘，容量是<code>377.4G</code>，实际可用<code>375.2G</code></p>
<p>7.建立Fusion Drive</p>
<p>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">diskutil coreStorage createVolume BBC6AD77-ADF2-40EE-A1D0-68BFE4913966 jhfs+ blub 375g</div><div class="line">diskutil coreStorage createVolume 【BBC6AD77-ADF2-40EE-A1D0-68BFE4913966】 jhfs+ blub 375g</div></pre></td></tr></table></figure></p>
<p>其中<code>【】</code>里面的id换成之前查到的自己的逻辑卷id，<code>【】</code>不要需要输入进去的。</p>
<p>建立的容量不能大于实际可用容量</p>
<p>8.退出终端 进入磁盘工具，看下是否已经成功开启Fusion Drive。</p>
<p><img src="https://lh3.googleusercontent.com/-V4J2mg_cGaY/WJqjk4iTFvI/AAAAAAAABZ8/Fj_iYgqMVvY/s0/2017-02-08_13-50-22.png" alt=""></p>
<p>9.接下来点 重新安装系统，后面就和普通安装没有任何区别了。</p>
<p><img src="https://lh3.googleusercontent.com/-Wbn3v2OHp_g/WJqjsnZ754I/AAAAAAAABaA/CQdziT0dQSo/s0/2017-02-08_13-50-54.png" alt=""><br><img src="https://lh3.googleusercontent.com/--cDPwpcrjdU/WJqj9ZiIjbI/AAAAAAAABaE/p3zyHD91k6k/s0/2017-02-08_13-52-01.png" alt=""><br><img src="https://lh3.googleusercontent.com/-m8qhXLJ-RoU/WJqkHAkXXmI/AAAAAAAABaM/Lp6Q0_zhXqk/s0/2017-02-08_13-52-39.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;p&gt;废话不多说进入主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-E0utAkBrw68/WJp0KJxr95I/AAAAAAAABYg/fg4_1VUTdq0/s0/2017-02-0
    
    </summary>
    
      <category term="苹果相关" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/Mac%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Cloud9でLaravel5の環境構築</title>
    <link href="http://blog.jiangnan.pw/cj0n616ev0005bk7kofv2hupy/"/>
    <id>http://blog.jiangnan.pw/cj0n616ev0005bk7kofv2hupy/</id>
    <published>2017-02-03T04:58:48.000Z</published>
    <updated>2017-02-03T05:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><p><img src="https://lh3.googleusercontent.com/-SXJRijcQ4F4/WJQPLCrNGrI/AAAAAAAAAzY/liQI8sZCmkU/s0/2017-02-03_14-03-41.png" alt=""><br><code>Workspace</code>名とテンプレートに<code>PHP</code>を選択します。<code>Hosted workspace</code>は<code>Private</code>でも<code>Public</code>でもどちらも構いませんが<code>Public</code>の場合はすべての人に公開されてしまいます。またフリー版では<code>Private</code>の<code>Workspace</code>は１つだけとなっています。</p>
<h2 id="Laravel5のプロジェクト作成"><a href="#Laravel5のプロジェクト作成" class="headerlink" title="Laravel5のプロジェクト作成"></a><code>Laravel5</code>のプロジェクト作成</h2><p>新しいタブでターミナルを開いてください。<br>以下のコマンドを実行してプロジェクトを作成してください。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rm README.md php.ini hello-world.php</div><div class="line">sudo composer self-update</div><div class="line">composer create-project laravel/laravel ./laravel --prefer-dist</div><div class="line">shopt -s dotglob</div><div class="line">mv laravel/* ./</div><div class="line">rm -rf laravel</div></pre></td></tr></table></figure>
<p>完了まで数分かかかります。</p>
<h2 id="Apacheのconf設定"><a href="#Apacheのconf設定" class="headerlink" title="Apacheのconf設定"></a>Apacheのconf設定</h2><p>以下のファイルを<code>vi</code>で開いて、<code>DocumentRoot</code>を以下に変更してください。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/apache2/sites-enabled/001-cloud9.conf</div></pre></td></tr></table></figure>
<p>編集箇所</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DocumentRoot /home/ubuntu/workspace/public</div></pre></td></tr></table></figure>
<h2 id="アップデート"><a href="#アップデート" class="headerlink" title="アップデート"></a>アップデート</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer update</div></pre></td></tr></table></figure>
<h2 id="DB設定"><a href="#DB設定" class="headerlink" title="DB設定"></a>DB設定</h2><p>プロジェクトを作成した際に<code>MySQL</code>の<code>DB</code>が同時に作成されています。<br>まずは下記コマンドを実行して接続先のホスト名を確認しましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql-ctl cli</div><div class="line">use c9;</div><div class="line">select @@hostname;　　←ホスト名が表示される</div><div class="line">exit</div></pre></td></tr></table></figure>
<h2 id="LaravelのDB接続設定"><a href="#LaravelのDB接続設定" class="headerlink" title="LaravelのDB接続設定"></a><code>Laravel</code>の<code>DB</code>接続設定</h2><p> ワークスペースの直下に<code>「.env」</code>ファイルがありますが、エディタのエクスプローラーからは見えないです。（設定で表示可能かもしれませんが分かりませんでした。）ターミナルからファイルをvimで開いて編集してください。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DB_HOST=HOSTNAME　　←上で確認したホスト名をセット</div><div class="line">DB_DATABASE=c9　　　  ←初期値</div><div class="line">DB_USERNAME=USERNAME　←cloud9のユーザー名</div><div class="line">DB_PASSWORD=　　　　　　←初期値は空でOK</div></pre></td></tr></table></figure>
<h2 id="起動確認"><a href="#起動確認" class="headerlink" title="起動確認"></a>起動確認</h2><p>ひと通り設定は完了したので、<code>Apache</code>を起動して確認してみましょう。<br><code>Run</code>ボタンをクリックして画面下部に表示されたurlをクリックすると初期画面が表示されます。下記のように表示されていれば完了です。（<code>Laravel5</code>の場合）</p>
<p><img src="https://lh3.googleusercontent.com/-iYRTE3BEO3o/WJQQf8428QI/AAAAAAAAAzo/FSuSCDBxU50/s0/2017-02-03_14-09-19.png" alt=""></p>
<p>手軽に環境を作成したいと思いましたが、テンプレートが用意されていないとまだまだ手間がかかります。ここはもう少し改善を期待したいです。</p>
<p>また、<code>Laravel</code>のプロジェクトとしてアプリを利用するためには、権限の変更などまだいくつか設定が 必要になりますが、そこは下記リンクや他で色々と紹介されていますので参照してみてください。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;h2 id=&quot;プロジェクト作成&quot;&gt;&lt;a href=&quot;#プロジェクト作成&quot; class=&quot;headerlink&quot; title=&quot;プロジェクト作成&quot;&gt;&lt;/a&gt;プロジェクト作成&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://lh3.googleuse
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Cloud9" scheme="http://blog.jiangnan.pw/tags/Cloud9/"/>
    
  </entry>
  
  <entry>
    <title>解决升级 OS X EI Capitan 后 Wineskin 打包的游戏无法运行的问题</title>
    <link href="http://blog.jiangnan.pw/cj0n616in0022bk7kty2yejhw/"/>
    <id>http://blog.jiangnan.pw/cj0n616in0022bk7kty2yejhw/</id>
    <published>2017-01-20T04:05:05.000Z</published>
    <updated>2017-02-09T03:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt-->
<p>此前苹果发布了 OS X 的新版本 EI Capitan，系统有更新当然是立马进行升级享受新鲜事物带来的快感了，但前几天想玩耍一局 Pro Evolution Soccer(实况足球)的时候，发现我深爱的游戏再也启动不起来了，和同样爱玩儿实况的同事交流之后发现情况大致有如下两种：</p>
<ol>
<li>双击 <code>.app</code> 文件，程序是可以打开的，但是窗口始终无法显示（我的电脑）；</li>
<li>双击 <code>.app</code> 文件，程序无法打开，系统提示 X11 无法打开，截图如下（同事的）：</li>
</ol>
<p><img src="https://lh3.googleusercontent.com/-QBgvDnnM1I8/WIF8A7QmcZI/AAAAAAAAAx4/9lYwjuvkybE/2017-01-20_11-54-59.png" alt=""></p>
<p>无法在绿茵场上尽情驰骋，这种事显然不能忍，立马去 <a href="http://wineskin.urgesoftware.com/" target="_blank" rel="external">Wineskin 官网</a>看了看，发现有一条关于 OS X EI Capitan 的新闻：</p>
<blockquote>
<p>Wineskin does not currently work correctly on El Capitan. The issue is being looked into, but I have no ETA for a fix. I’ll get a fix out as soon as I can.<br>Some people have been able to upgrade to the latest version of XQuartz, and change their wrappers to use XQuartz and not WineskinX11 and have gotten wrappers to work, but this method has not worked for everyone.<br>Please add to the discussion here if you are helping find a solution.</p>
</blockquote>
<p>又看到有一条新版本发布的新闻：</p>
<blockquote>
<p>I’ve released an update for Wineskin… version 2.6.1.<br>I think I’ve fixed all the El Capitan bugs and it should work fine on 10.6 - 10.11 now.<br>important point. This has to change how an engine is installed in a wrapper slightly. If you update a wrapper to 2.6.1 and it does not work right, please reinstall the engine in the wrapper. You can just use Change Engine and install the same one back in, but it will install it correctly for 2.6.1 and then things should work right. Newly made wrappers should have no issues.</p>
</blockquote>
<p>这说明官方发布的最新的 2.6.1 版本已经解决了该问题，那么剩下的问题就简单多了，我们只需要将 <code>Wineskin Wrapper</code> 给替换成官方发布的最新版本即可。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>在应用程序中找到需要修复的游戏，右键选择 <code>显示包内容</code>；</li>
<li>打开 <code>Wineskin.app</code>，选择 <code>advance</code>，记录下引擎版本号：</li>
</ol>
<p><img src="https://lh3.googleusercontent.com/-6iUQqxE4ehs/WIGN2RoMBgI/AAAAAAAAAyY/PZ-MapzWiSU/s0/2017-01-20_13-11-04.png" alt=""></p>
<ol>
<li>下载最新版本的 <a href="http://wineskin.urgesoftware.com/tiki-index.php?page=Downloads" target="_blank" rel="external">Wineskin Winery</a>；</li>
<li>打开 <code>Wineskin Winery</code>，添加一个新的 <code>engine</code>，版本号最好与之前记录的版本号一致：</li>
</ol>
<p><img src="https://lh3.googleusercontent.com/-6GZhT7VGSoE/WIGOD7jQBmI/AAAAAAAAAyc/8Vsd_dVjhUA/s0/2017-01-20_13-11-58.png" alt=""></p>
<ol>
<li>更新 <code>Wrapper Version</code> 至最新版，只要在 2.6.1 以上即代表已经使用了官方修复 OS X EI Capitan 问题的 <code>Wrapper</code>：</li>
</ol>
<p><img src="https://lh3.googleusercontent.com/-YqFjJh_LWPA/WIGOQFuz0TI/AAAAAAAAAyg/N5YYm23sKAc/s0/2017-01-20_13-12-47.png" alt=""></p>
<ol>
<li>选择 <code>Create New Blank Wrapper</code>，填写游戏名称并选择 <code>Create</code>。如果有提示需要安装东西，都可以选择 <code>Cancel</code>；</li>
<li>创建成功后，将原游戏 <code>.app</code> 文件包内容中的 <code>Content/Resources/driver_c</code> 文件夹以及 <code>Content/Resources/system.reg</code>、<code>Content/Resources/user.reg</code>、<code>Content/Resources/userdef.reg</code> 这三个文件覆盖到我们新创建的 <code>Wrapper</code> 文件包内容中的 <code>Content/Resources/</code> 文件夹中，它们分别相当于 <code>Windows</code> 系统中的 C 盘和注册表；</li>
<li>再打开我们新创建的 <code>Wrapper</code> 文件包内容中的 <code>&#39;Wineskin.app&#39;</code>，选择 <code>advance</code>，然后选择程序的启动路径，即刚刚覆盖的 <code>driver_c</code> 文件夹中我们想要启动的 <code>exe</code> 程序：</li>
</ol>
<p><img src="https://lh3.googleusercontent.com/-D0qlGz7IKW4/WIGOfMRqr1I/AAAAAAAAAyk/rRYqm5pR1LA/s0/2017-01-20_13-13-48.png" alt=""></p>
<ol>
<li>退回到我们在第 6 步中生成新 Wineskin Wrapper 的目录，当然现在它已经是一个完整的游戏程序了，双击运行它，然后 enjoy it!</li>
</ol>
<p>鉴于评论区有朋友反映下载 <code>engine</code> 和 <code>wrapper</code> 总是失败，所以现在将最新的 <code>engine</code> 和 <code>wrapper</code> 上传到网盘供大家下载：</p>
<ol>
<li>Engine 1.7.52 <a href="http://pan.baidu.com/s/1bnoelND" target="_blank" rel="external">下载地址</a>，提取码：<code>ikhq</code>；</li>
<li>Wrapper 2.6.1 <a href="http://pan.baidu.com/s/1c0c6Qo4" target="_blank" rel="external">下载地址</a>，提取码：<code>v1dh</code>。</li>
</ol>
<p>下载后，将 <code>WS9Wine1.7.52.tar.7z</code> 这个文件放入 <code>~/Library/Application Support/Wineskin/Engines</code> 这个文件夹；将 <code>Wineskin-2.6.1.app.zip</code> 这个文件解压缩，得到 <code>Wineskin-2.6.1.app</code> 这个文件，将其放入 <code>~/Library/Application Support/Wineskin/Wrapper</code> 这个文件夹，然后重新打开上面第 3 步中下载的 <code>Wineskin Winery</code>，如果 <code>engine</code> 和 <code>wrapper</code> 都已经存在了，直接进行第 6 步的操作即可。</p>
<hr>
<p>再放上 <code>Wineskin Winery</code> 的网盘地址：</p>
<p>Wineskin Winery 1.7 <a href="http://pan.baidu.com/s/1hq8TO8G" target="_blank" rel="external">下载地址</a>，提取码：<code>dpdu</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--excerpt--&gt;
&lt;p&gt;此前苹果发布了 OS X 的新版本 EI Capitan，系统有更新当然是立马进行升级享受新鲜事物带来的快感了，但前几天想玩耍一局 Pro Evolution Soccer(实况足球)的时候，发现我深爱的游戏再也启动不起来了，和同样爱玩儿实况的
    
    </summary>
    
      <category term="苹果相关" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/Mac%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Nginxのエラーページをカスタマイズする方法</title>
    <link href="http://blog.jiangnan.pw/cj0n616h50011bk7kebu29fgv/"/>
    <id>http://blog.jiangnan.pw/cj0n616h50011bk7kebu29fgv/</id>
    <published>2017-01-19T08:06:00.000Z</published>
    <updated>2017-01-20T06:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Nginxのデフォルトのエラーページは格好良くないし、Nginxを使ってることがバレバレです。それが嫌だったので以下の方法でカスタマイズしました。</p>
</blockquote>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><blockquote>
<p>Nginxではエラーページのカスタマイズにはerror_pageディレクティブを使います。<br>カスタマイズの基本的な方法は、custom_404.htmlを作って、nginxの設定ファイルを以下の様な感じにします。<br>これで、Nginxを再起動して、存在しないファイルへリクエストするとcustom_404.htmlが帰ってくるようになります。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">    # 中略</div><div class="line"></div><div class="line">    error_page 404 /custom_404.html;</div><div class="line">    location = /custom_404.html &#123;</div><div class="line">        root /opt/nginx/html;</div><div class="line">        internal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # 中略</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="応用"><a href="#応用" class="headerlink" title="応用"></a>応用</h2><blockquote>
<p>以下では、よりより実践的な例を紹介します。</p>
<p>IP直打ちでのアクセスは全てエラーページを表示</p>
<p>IPアドレスを直接入力してアクセスしてきた場合や想定外のホスト名でアクセスしてきた場合に常に<code>custom_404.html</code>を表示したければ以下の様にします。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80 default_server;</div><div class="line">    error_page 404 /custom_404.html;</div><div class="line">    location / &#123;</div><div class="line">        return 404;</div><div class="line">    &#125;</div><div class="line">    location = /custom_404.html &#123;</div><div class="line">        root /opt/nginx/html;</div><div class="line">        internal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>どんなエラーが発生しても404ページを返す</p>
<p>実際に発生しているエラーが403だろうが503だろうが、ユーザーには404エラーが発生しているように見せかけます。<br>下の例では400, 401, 403, 500, 502, 503のいずれが発生してもクライアントに返すHTTPステータスコードを404に書き換え、custom_404.htmlを返します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name example.com;</div><div class="line">    error_page 400 401 403 404 500 502 503 =404 /custom_404.html;</div><div class="line">    location = /custom_404.html &#123;</div><div class="line">        root /opt/nginx/html;</div><div class="line">        internal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>管理画面を隠す</p>
<p>特定のIP以外から管理画面へアクセスされた時は404画面を出します。<br>この例では<code>192.168.0.1</code>からの管理画面へのリクエストは許可し、それ以外の場合は404ステータスとcustom_404.htmlを返します。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Nginxのデフォルトのエラーページは格好良くないし、Nginxを使ってることがバレバレです。それが嫌だったので以下の方法でカスタマイズしました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="Nginx" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Nginx/"/>
    
    
      <category term="nginx" scheme="http://blog.jiangnan.pw/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>江南云服务正式上线</title>
    <link href="http://blog.jiangnan.pw/cj0n616em0004bk7kzzvp4r6l/"/>
    <id>http://blog.jiangnan.pw/cj0n616em0004bk7kzzvp4r6l/</id>
    <published>2017-01-10T05:10:27.000Z</published>
    <updated>2017-01-20T05:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>江南云-提供基于百度云，天翼云(正在开发中Y(^_^)Y)的云存储服务，包括图片，音乐，视频，文件的云存储下载服务。</p>
<ul>
<li>提供百度云，天翼云本身不支持的迅雷等工具直接下载的功能。</li>
<li>采用用户本地存储TOKEN的方式进行授权，充分保证用户的个人隐私</li>
<li>提供图片，音视频等流媒体的直接外链功能，从此站长再也不用费心找图床。</li>
</ul>
<p><img src="https://lh3.googleusercontent.com/-qqlLrJo8JS4/WHRseojYN2I/AAAAAAAAAuQ/lXV-fkSg97M/s0/2017-01-10_14-09-12.png" alt="江南云首页"><br><img src="https://lh3.googleusercontent.com/-tQF7SvGlpMk/WHRudf1irvI/AAAAAAAAAuw/YwENVxgYmk0/s0/2017-01-10_14-17-39.png" alt="授权代码获取"><br><img src="https://lh3.googleusercontent.com/-fIOPEh7rQ1E/WHRus4ZSdeI/AAAAAAAAAu0/Ib9kRzuSxHM/s0/2017-01-10_14-18-42.png" alt="江南云文件管理"><br><img src="https://lh3.googleusercontent.com/-dagoHUPxzQQ/WHRvn18eX8I/AAAAAAAAAvA/2h1_xL5NPW8/s0/2017-01-10_14-22-39.png" alt="江南云侧边栏"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;江南云-提供基于百度云，天翼云(正在开发中Y(^_^)Y)的云存储服务，包括图片，音乐，视频，文件的云存储下载服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供百度云，天翼云本身不支持的迅雷等工具直接下载的功能。&lt;/li&gt;
&lt;li&gt;采用用户本地存储TOKEN的方式进行授权，充分保证用户
    
    </summary>
    
      <category term="作品展示" scheme="http://blog.jiangnan.pw/categories/%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="江南云" scheme="http://blog.jiangnan.pw/tags/%E6%B1%9F%E5%8D%97%E4%BA%91/"/>
    
      <category term="作品展示" scheme="http://blog.jiangnan.pw/tags/%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5导入自定义函数和类的方法</title>
    <link href="http://blog.jiangnan.pw/cj0n616gu000xbk7k3a6v9154/"/>
    <id>http://blog.jiangnan.pw/cj0n616gu000xbk7k3a6v9154/</id>
    <published>2016-12-01T07:19:55.000Z</published>
    <updated>2017-01-19T08:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们的应用里经常会有一些全局都可能会用的函数，我们应该怎么放置它会比较好呢？以下有一种推荐的方式：<br><!--excerpt--></p>
<h2 id="导入自定义函数"><a href="#导入自定义函数" class="headerlink" title="导入自定义函数"></a>导入自定义函数</h2><p>我们的应用里经常会有一些全局都可能会用的函数，我们应该怎么放置它会比较好呢？以下有一种推荐的方式：</p>
<ol>
<li>创建文件 <code>app/helpers.php</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">// 示例函数</div><div class="line">function foo() &#123;</div><div class="line">    return &quot;foo&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改项目 <code>composer.json</code></li>
</ol>
<p>在项目 composer.json 中 autoload 部分里的 files 字段加入该文件即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    &quot;autoload&quot;: &#123;</div><div class="line">        &quot;files&quot;: [</div><div class="line">            &quot;app/helpers.php&quot;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer dump-autoload</div></pre></td></tr></table></figure></p>
<p>OK，然后你就可以在任何地方用到 <code>app/helpers.php</code> 中的函数了。</p>
<h2 id="导入自定义类"><a href="#导入自定义类" class="headerlink" title="导入自定义类"></a>导入自定义类</h2><p>比如说我要加载一个名字是BaiduPCS.php类文件</p>
<p>修改项目 <code>composer.json</code></p>
<p>在项目 composer.json 中 autoload 部分里的 classmap 字段加入该文件所在的文件夹即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&quot;autoload&quot;: &#123;</div><div class="line">    &quot;classmap&quot;: [</div><div class="line">        &quot;database&quot;,</div><div class="line">        &quot;app/DDL/Classes&quot;  &lt;== 就是这里</div><div class="line">    ],</div><div class="line">    &quot;files&quot;: [</div><div class="line">        &quot;app/DDL/Functions/functions.php&quot;</div><div class="line">    ],</div><div class="line">    &quot;psr-4&quot;: &#123;</div><div class="line">        &quot;App\\&quot;: &quot;app/&quot;,</div><div class="line">        &quot;DDL\\&quot;:&quot;app/DDL/&quot;</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>然后运行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer dump-autoload</div></pre></td></tr></table></figure></p>
<p>OK，然后你就可以在你要使用该类的地方添加以下代码来使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use BaiduPCS;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们的应用里经常会有一些全局都可能会用的函数，我们应该怎么放置它会比较好呢？以下有一种推荐的方式：&lt;br&gt;&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;h2 id=&quot;导入自定义函数&quot;&gt;&lt;a href=&quot;#导入自定义函数&quot; class=&quot;headerlink&quot; title=&quot;导入自
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="Laravel" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Laravel/"/>
    
    
      <category term="laravel" scheme="http://blog.jiangnan.pw/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>常用图床及自建图床方法汇总</title>
    <link href="http://blog.jiangnan.pw/cj0n616fa0009bk7k3w4nmjsh/"/>
    <id>http://blog.jiangnan.pw/cj0n616fa0009bk7k3w4nmjsh/</id>
    <published>2016-11-10T06:28:41.000Z</published>
    <updated>2017-03-24T01:45:10.742Z</updated>
    
    <content type="html"><![CDATA[<p>国内图床的中流砥柱，速度非常快，服务也较为稳定，目前还支持了 HTTPS ，同时有大量的第三方工具……<br><!--excerpt--></p>
<h2 id="公共图床"><a href="#公共图床" class="headerlink" title="公共图床"></a>公共图床</h2><h3 id="微博图床"><a href="#微博图床" class="headerlink" title="微博图床"></a>微博图床</h3><p>国内图床的中流砥柱，速度非常快，服务也较为稳定，目前还支持了 HTTPS ，同时有大量的第三方工具方便使用，缺点是批量上传比较麻烦。</p>
<ul>
<li><a href="http://photo.weibo.com/photos/upload" target="_blank" rel="external">官方上传地址</a></li>
<li><a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf/related" target="_blank" rel="external">新浪微博图床 Chrome 插件</a></li>
<li><a href="https://chrome.google.com/webstore/detail/%E5%9B%B4%E8%84%96%E6%98%AF%E4%B8%AA%E5%A5%BD%E5%9B%BE%E5%BA%8A/pngmcllbdfgmhdgnnpfaciaolgbjplhe/related?hl=zh-CN" target="_blank" rel="external">围脖图床 Chrome 插件（网页版不可用，Firefox 版在附加组件中搜索安装即可）</a></li>
</ul>
<h3 id="imgur"><a href="#imgur" class="headerlink" title="imgur"></a>imgur</h3><p>09年就成立了的国外老牌图床，支持https，理论上不限制大小，还有邮件发图、视频转 GIF 、URL 上传等功能，很强大，可惜间歇性被墙，就算没被墙国内访问也很慢，面向国外的站点使用倒很合适。</p>
<p>地址：<a href="https://imgur.com/" target="_blank" rel="external">https://imgur.com</a></p>
<h3 id="sm-ms"><a href="#sm-ms" class="headerlink" title="sm.ms"></a>sm.ms</h3><p>支持https，有 API ，图片要求大小在 5MB 以下，一次上传不得超过10张，维护者是 <a href="https://ttt.tt/" target="_blank" rel="external">通天塔</a> 的站长。主站 <a href="https://sm.ms/" target="_blank" rel="external">https://sm.ms</a> 目前用的是阿里云新加坡的机器，而上传的图片则会被存储到使用阿里云香港的 <a href="https://ooo.0o0.ooo/" target="_blank" rel="external">https://ooo.0o0.ooo</a> 中，因此速度还是很不错的。<a id="more"></a></p>
<p>地址：<a href="https://sm.ms/" target="_blank" rel="external">https://sm.ms</a></p>
<p>API：<a href="https://sm.ms/doc/" target="_blank" rel="external">https://sm.ms/doc/</a></p>
<h3 id="otar-im"><a href="#otar-im" class="headerlink" title="otar.im"></a>otar.im</h3><p>这个网站本身并不是一个图床，但却做到了一个更比三个强，整合上文提到的微博图床、imgur、sm.ms 到一个页面中，非常方便实用。然而最近使用时提示未知错误上传失败，不知是否停止维护了。</p>
<p>地址：<a href="http://upload.otar.im/" target="_blank" rel="external">http://upload.otar.im/</a></p>
<h3 id="V2EX-图片库"><a href="#V2EX-图片库" class="headerlink" title="V2EX 图片库"></a>V2EX 图片库</h3><p>程序员社区 v2ex 推出的付费图床服务，由于博主没有需求所以未付费使用过，效果不明。</p>
<p>地址：<a href="https://www.v2ex.com/i/about" target="_blank" rel="external">https://www.v2ex.com/i/about</a></p>
<h3 id="LightPic"><a href="#LightPic" class="headerlink" title="LightPic"></a>LightPic</h3><p>使用其自己开发的系统，站点规则中写明了不保证图片可以永久存储，似乎使用了 CloudFlare 非中国版的 CDN ，因此支持 https ，但是 CF 在国内部分地区的访问效果很堪忧。</p>
<p>地址：<a href="https://lightpic.info/" target="_blank" rel="external">https://lightpic.info</a></p>
<h3 id="picwindow"><a href="#picwindow" class="headerlink" title="picwindow"></a>picwindow</h3><p>国外图床，号称长久而稳定的储存，图片要求大小在 10MB 以下，国内访问速度一般但可以接受，缺点是上传时有些慢，且不支持 HTTPS ，不过他的远程上传（其实也就是通过 URL 直接上床图片）的功能还是很好用的。</p>
<p>地址：<a href="http://www.picwindow.com/" target="_blank" rel="external">http://www.picwindow.com/</a></p>
<h3 id="贴图库"><a href="#贴图库" class="headerlink" title="贴图库"></a>贴图库</h3><p>早年的神级图床，可惜后来因为某种原因关停，恢复后暂时使用了 kekaoyun 这个域名，现在已经切换回了原域名，但是也从关停前的永久免费变为了6个月免费，也就是免费存储的图片只保存六个月，并提供了付费的商业选项。速度没得说，但是不适合博客这样的站点使用。</p>
<p>地址：<a href="http://www.tietuku.com/" target="_blank" rel="external">http://www.tietuku.com/</a></p>
<p>费用详情：<a href="http://www.tietuku.com/open" target="_blank" rel="external">http://www.tietuku.com/open</a></p>
<h3 id="萝莉图床"><a href="#萝莉图床" class="headerlink" title="萝莉图床"></a>萝莉图床</h3><p>也是早年一个很好用的图床，但是现在需要邀请注册才能使用。</p>
<p>地址：<a href="http://loli.io/" target="_blank" rel="external">http://loli.io/</a></p>
<h2 id="自建图床"><a href="#自建图床" class="headerlink" title="自建图床"></a>自建图床</h2><h3 id="七牛、又拍云等云存储"><a href="#七牛、又拍云等云存储" class="headerlink" title="七牛、又拍云等云存储"></a>七牛、又拍云等云存储</h3><p>这些服务商其实是做 CDN 和云存储的，但是由于有一定的免费存储及流量额度，所以也有很多人拿来做自己博客的图床，速度可以和微博图床媲美，各种以其为基础开发的第三方工具用起来也很顺手，缺点是大部分都不支持 https ，同时注册时要求上传身份证信息挺麻烦的。下面推荐几个具有代表性的服务商及第三方工具：</p>
<p>服务商：</p>
<ul>
<li>七牛：<a href="http://www.qiniu.com/" target="_blank" rel="external">http://www.qiniu.com/</a></li>
<li>又拍云：<a href="https://www.upyun.com/index.html" target="_blank" rel="external">https://www.upyun.com/index.html</a></li>
</ul>
<p>工具：</p>
<ul>
<li>iPic (Mac only)：<a href="http://i.toolinbox.net/iPic/iPicUploader.html" target="_blank" rel="external">http://i.toolinbox.net/iPic/iPicUploader.html</a></li>
<li>yotuku：<a href="http://yotuku.cn/" target="_blank" rel="external">http://yotuku.cn/</a></li>
<li>PHP版七牛图床：<a href="https://github.com/4679/qiniu-picbed" target="_blank" rel="external">https://github.com/4679/qiniu-picbed</a></li>
<li>Get Link：<a href="https://github.com/int64ago/getlink" target="_blank" rel="external">https://github.com/int64ago/getlink</a></li>
</ul>
<h3 id="树洞外链"><a href="#树洞外链" class="headerlink" title="树洞外链"></a>树洞外链</h3><blockquote>
<p>树洞外链是一款免费开源的PHP外链网盘系统，界面简洁友好，支持七牛、本地、远程、阿里云OSS、又拍云五种储存方式，支持多用户系统，多上传方案策略。</p>
</blockquote>
<p>官方给出了这样的说明，实际使用下来也确实不错，有文档、安装方便也比较稳定，但存在着一些小 Bug ，小站点用来自建图床还是很合适的。</p>
<p>官网：<a href="https://yun.aoaoao.me/" target="_blank" rel="external">https://yun.aoaoao.me/</a></p>
<p>Github：<a href="https://github.com/HFO4/shudong-share" target="_blank" rel="external">https://github.com/HFO4/shudong-share</a></p>
<h3 id="Lychee"><a href="#Lychee" class="headerlink" title="Lychee"></a>Lychee</h3><p>一款开源的图片管理系统，实际上也可以用作图床，一直在更新，自身功能很强大，还支持二次开发插件及扩展来丰富功能，此外这套系统也支持 Docker 。</p>
<p>GIthub：<a href="https://github.com/electerious/Lychee" target="_blank" rel="external">https://github.com/electerious/Lychee</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国内图床的中流砥柱，速度非常快，服务也较为稳定，目前还支持了 HTTPS ，同时有大量的第三方工具……&lt;br&gt;&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;h2 id=&quot;公共图床&quot;&gt;&lt;a href=&quot;#公共图床&quot; class=&quot;headerlink&quot; title=&quot;公共图床&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="开源" scheme="http://blog.jiangnan.pw/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="图床" scheme="http://blog.jiangnan.pw/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>MacOSX10.11开启任意显示器HiDPI方法</title>
    <link href="http://blog.jiangnan.pw/cj0n616i4001kbk7kvd0dvjf2/"/>
    <id>http://blog.jiangnan.pw/cj0n616i4001kbk7kvd0dvjf2/</id>
    <published>2016-11-08T05:27:16.000Z</published>
    <updated>2017-02-16T01:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>MacOSX10.11开启任意显示器HiDPI方法<br><!--excerpt--></p>
<blockquote>
<p>研究了下，其实没怎么变化。Overrides文件夹目录位置变了而已。<br>本人开启HiDPI现在更主要是为了截图截出2x的效果，实际调整分辨率的是另一个小显示器~已经很久用不到HiDPI的真实意义啦</p>
</blockquote>
<h2 id="对于权限问题的补充"><a href="#对于权限问题的补充" class="headerlink" title="对于权限问题的补充"></a>对于权限问题的补充</h2><p>10.11系统权限设置又改动，一些系统文件只有“系统”有权限读写，首先要关闭这个权限：<br>开机按住 <strong>command ＋ R</strong>，进入恢复模式，然后在“终端”中输入“csrutil disable”关闭权限。如果需要打开，则csrutil enable。<br>这是在知乎上看到相同的问题，别人提到的。LZ好像没遇到过这种情况，如果有人遇到同样的权限问题，这样解决就好了。</p>
<h3 id="对于权限问题的补充-1"><a href="#对于权限问题的补充-1" class="headerlink" title="对于权限问题的补充"></a>对于权限问题的补充</h3><ol>
<li><p>开启HiDPI<br>打开终端 键入<br>sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool YES<br>回车后，输入当前系统管理员的密码，继续回车确认。</p>
</li>
<li><p>获取你的显示器的两个 ID:<br>DisplayVendorID和DisplayProductID<br>打开终端, 命令分别是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ioreg -l | grep &quot;DisplayVendorID&quot;</div><div class="line">ioreg -l | grep &quot;DisplayProductID&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>OK.在桌面上新建一个文件夹,名字格式是:DisplayVendorID-XXXX,其中XXXX是你的DisplayVendorID的16进制值小写.<br>于是,我会新建一个 DisplayVendorID-XXXX的文件夹,然后在这个文件夹里面新建一个空白文件.名字格式是<br>DisplayProductID-YYYY,自然YYYY就是你的DisplayProductID的16进制了.<br>我新建的文件是 DisplayProductID-YYYY.<br>最好下载我提供的模板编辑.<br>相信你不一定能找到个合适的进制转换工具，我从网上找到了一个很好用的flash，并把它放到了自己的服务器里，<br>大家如有需要随时可以去用<br>在线进制转换器<br>建议使用PlistPro工具编辑，方便快捷。.<br><strong>范例:</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>DisplayProductID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>10496<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>DisplayVendorID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>8547<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>scale-resolutions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAKAAAABkAAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAUAAAADIAAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAKAAAABDgAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAUAAAACHAAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAHgAAABDgAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAPAAAACHAAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAGkAAABBoAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAANIAAACDQAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAGQAAAA4QAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAMgAAABwgAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAFoAAAA4QAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAALQAAABwgAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAINAAAA4QAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">                AAAQaAAABwgAAAABACAAAA==</div><div class="line">                <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>建议下载本帖子中的附件。包含本范例。</p>
<p>最后面那一坨,和以及里面的data如何来的<br>比如我想使用1600900这个HiDPI,那么我就需要生成两个分辨率,其中一个是1600900,一个是其双倍,3200*1800.<br>1600,900两个值的16进制是00000640 00000384 ;<br>3200,1800两个值的16进制是00000C80 00000708;<br>后面加上 00000001 00200000<br>于是会得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">00000640 00000384 00000001 00200000</div><div class="line">00000C80 00000708 00000001 00200000</div></pre></td></tr></table></figure></p>
<p>用附件中的PlistPro编辑这个DisplayProductID-YYYY,计算并填写你想要的分辨率.<br>最后,把这个 DisplayVendorID-XXXX 文件夹,</p>
<p>拷贝到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/System/Library/Displays/Contents/Resources/Overrides/</div></pre></td></tr></table></figure></p>
<p>(10.10及以下是 /System/Library/Displays/Overrides/ )<br>重启系统就可以看到了.可以安装RDM切换,在任务栏,方便快捷.<br>各位可以根据自己的屏幕规格来添加.</p>
<p>范例中，设定的分辨率是<br>2560x1600 2x (16:10)<br>2560x1080 2x (21:9)<br>1920x1080 2x (16:9)<br>1680x1050 2x (16:10)<br>1600x900 2x(16:9)<br>1440x900 2x(16:10)<br>2100x900 2x(21:9)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MacOSX10.11开启任意显示器HiDPI方法&lt;br&gt;&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;研究了下，其实没怎么变化。Overrides文件夹目录位置变了而已。&lt;br&gt;本人开启HiDPI现在更主要是为了截图截出2x的效果，实际调整分辨率的
    
    </summary>
    
      <category term="苹果相关" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/"/>
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/categories/%E8%8B%B9%E6%9E%9C%E7%9B%B8%E5%85%B3/Mac%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac技巧" scheme="http://blog.jiangnan.pw/tags/Mac%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>禁止WordPress头部加载s.w.org</title>
    <link href="http://blog.jiangnan.pw/cj0n616hd0016bk7kz02r63hr/"/>
    <id>http://blog.jiangnan.pw/cj0n616hd0016bk7kz02r63hr/</id>
    <published>2016-10-17T05:49:24.000Z</published>
    <updated>2017-02-16T01:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>WordPress在头部添加dns-prefetch，应该是为了从s.w.org预获取表情和头像，目的是提高网页加载速度 ，但s.w.org国内根本无法访问，什么预获取、什么提高速度，都是泡影，不仅没用处，反而可能会影响速度，那就禁止它。<br><!-- excerpt --><br><img src="https://dl.dropbox.com/s/5et1y0kkomei4wx/wordpress1.jpg?dl=0" alt="wordpress"></p>
<p>升级到WordPress 4.6之后，有童鞋发现头部加载了一个:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&apos;dns-prefetch&apos; href=&apos;//s.w.org&apos;&gt;</div></pre></td></tr></table></figure></p>
<p>WordPress在头部添加dns-prefetch，应该是为了从s.w.org预获取表情和头像，目的是提高网页加载速度 ，但s.w.org国内根本无法访问，什么预获取、什么提高速度，都是泡影，不仅没用处，反而可能会影响速度，那就禁止它。</p>
<h2 id="将下面的代码添加到主题functions-php模板中："><a href="#将下面的代码添加到主题functions-php模板中：" class="headerlink" title="将下面的代码添加到主题functions.php模板中："></a>将下面的代码添加到主题functions.php模板中：</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remove_action( &apos;wp_head&apos;, &apos;wp_resource_hints&apos;, 2 );</div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function remove_dns_prefetch( $hints, $relation_type ) &#123;</div><div class="line">if ( &apos;dns-prefetch&apos; === $relation_type ) &#123;</div><div class="line">return array_diff( wp_dependencies_unique_hosts(), $hints );</div><div class="line">&#125;</div><div class="line">return $hints;</div><div class="line">&#125;</div><div class="line">add_filter( &apos;wp_resource_hints&apos;, &apos;remove_dns_prefetch&apos;, 10, 2 );</div></pre></td></tr></table></figure>
<p>方法二貌似兼容性更好些。<br>附带一个禁止加载表情代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Remove emoji script</div><div class="line">remove_action( &apos;wp_head&apos;, &apos;print_emoji_detection_script&apos;, 7 );</div><div class="line">remove_action( &apos;wp_print_styles&apos;, &apos;print_emoji_styles&apos; );</div><div class="line">add_filter( &apos;emoji_svg_url&apos;, &apos;__return_false&apos; );</div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://wordpress.org/support/topic/remove-the-new-dns-prefetch-code/" target="_blank" rel="external">https://wordpress.org/support/topic/remove-the-new-dns-prefetch-code/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WordPress在头部添加dns-prefetch，应该是为了从s.w.org预获取表情和头像，目的是提高网页加载速度 ，但s.w.org国内根本无法访问，什么预获取、什么提高速度，都是泡影，不仅没用处，反而可能会影响速度，那就禁止它。&lt;br&gt;&lt;!-- excerpt -
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="WordPress" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/WordPress/"/>
    
    
      <category term="WordPress" scheme="http://blog.jiangnan.pw/tags/WordPress/"/>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 后台文件管理插件：FileBrowser</title>
    <link href="http://blog.jiangnan.pw/cj0n616h90012bk7kr08zvfzq/"/>
    <id>http://blog.jiangnan.pw/cj0n616h90012bk7kr08zvfzq/</id>
    <published>2016-10-17T05:05:54.000Z</published>
    <updated>2017-01-19T08:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>WordPress 后台文件管理插件：FileBrowser<br><!-- excerpt --><br><img src="https://dl.dropbox.com/s/ju6fp7yj13acoms/wordpress.jpg?dl=0" alt="wordpress"></p>
<p>WordPress 后台文件管理插件：FileBrowser</p>
<p>wordpress本身没有像dedecms那样的在线文件管理功能，一般的文件管理都得通过FTP来实现，把文件下载下来，然后再编辑上传，很麻烦，而且有的空间根本不支持FTP，所以我们可以使用wordpress后台文件管理插件：FileBrowser。</p>
<p><a href="https://wordpress.org/plugins/filebrowser/" target="_blank" rel="external">原版下载地址</a><br><a href="http://pan.baidu.com/share/link?shareid=374434&amp;uk=757737247" target="_blank" rel="external">汉化版下载地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WordPress 后台文件管理插件：FileBrowser&lt;br&gt;&lt;!-- excerpt --&gt;&lt;br&gt;&lt;img src=&quot;https://dl.dropbox.com/s/ju6fp7yj13acoms/wordpress.jpg?dl=0&quot; alt=&quot;wordpre
    
    </summary>
    
      <category term="技术分享" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
      <category term="WordPress" scheme="http://blog.jiangnan.pw/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/WordPress/"/>
    
    
      <category term="WordPress" scheme="http://blog.jiangnan.pw/tags/WordPress/"/>
    
      <category term="plugins" scheme="http://blog.jiangnan.pw/tags/plugins/"/>
    
  </entry>
  
</feed>
